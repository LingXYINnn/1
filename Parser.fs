// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "src/Parser.fsy"


// Preamble with definitions of types and/or functions.  The code appearing here
// will be placed on top of the generated parser source code.
open FSharp.Text.Parsing
open AST

// Auxiliary function to compute the position of an AST node
let pos (parseState: IParseState, inputIdx: int): AST.Position =
  let mainPos = parseState.InputStartPosition inputIdx
  let (rstart, rend) = parseState.ResultRange
  { FileName = mainPos.FileName
    Line = mainPos.pos_lnum + 1 // Line numbering from 1
    Col = mainPos.pos_cnum - mainPos.pos_bol + 1 // Line numbering from 1
    LineStart = rstart.pos_lnum + 1 // Row numbering from 1
    ColStart = rstart.pos_cnum - rstart.pos_bol + 1 // Column numbering from 1
    LineEnd = rend.pos_lnum + 1
    ColEnd = rend.pos_cnum - rend.pos_bol } // No +1: cover last-used character

// Auxiliary function to build an Abstract Syntax Tree node for a Hygge pretype.
// 'inputIdx' is the index of the symbol to use for computing the position of
// this expression (it will be used e.g. when reporting error messages).
let mkPretypeNode (parseState: IParseState, inputIdx: int, t: Pretype): PretypeNode =
  { Pos = pos(parseState, inputIdx); Pretype = t }

// Auxiliary function to build an untyped AST node for a Hygge expression.
// 'inputIdx' is the index of the symbol to use for computing the position of
// this expression (it will be used e.g. when reporting error messages).
let mkNode (parseState: IParseState, inputIdx: int, e: UntypedExpr): UntypedAST =
  { Pos = pos(parseState, inputIdx); Env = (); Type = (); Expr = e }

//SC
let mkBool (ps: IParseState) idx v =
  mkNode(ps, idx, Expr.BoolVal v)


# 43 "src/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | IDENT of (string)
  | UNION
  | MATCH
  | WITH
  | STRUCT
  | FUN
  | DO
  | WHILE
  | ASSERT
  | PRINTLN
  | PRINT
  | READ_FLOAT
  | READ_INT
  | SEMI
  | EOF
  | COLON
  | LARROW
  | RARROW
  | COMMA
  | DOT
  | LET
  | TYPE
  | MUTABLE
  | LPAR
  | RPAR
  | LCURLY
  | RCURLY
  | IF
  | THEN
  | ELSE
  | EQ
  | LT
  | ANDSC
  | ORSC
  | AND
  | OR
  | NOT
  | TIMES
  | PLUS
  | LIT_UNIT of (unit)
  | LIT_STRING of (string)
  | LIT_FLOAT of (single)
  | LIT_INT of (int)
  | LIT_BOOL of (bool)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_UNION
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_STRUCT
    | TOKEN_FUN
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_ASSERT
    | TOKEN_PRINTLN
    | TOKEN_PRINT
    | TOKEN_READ_FLOAT
    | TOKEN_READ_INT
    | TOKEN_SEMI
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_LARROW
    | TOKEN_RARROW
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_LET
    | TOKEN_TYPE
    | TOKEN_MUTABLE
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_ANDSC
    | TOKEN_ORSC
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_TIMES
    | TOKEN_PLUS
    | TOKEN_LIT_UNIT
    | TOKEN_LIT_STRING
    | TOKEN_LIT_FLOAT
    | TOKEN_LIT_INT
    | TOKEN_LIT_BOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_expr
    | NONTERM_curlyExpr
    | NONTERM_sequenceExpr
    | NONTERM_simpleExpr
    | NONTERM_ifExpr
    | NONTERM_orExpr
    | NONTERM_andExpr
    | NONTERM_relExpr
    | NONTERM_addExpr
    | NONTERM_multExpr
    | NONTERM_unaryExpr
    | NONTERM_ascriptionExpr
    | NONTERM_primary
    | NONTERM_variable
    | NONTERM_value
    | NONTERM_pretype
    | NONTERM_ident
    | NONTERM_parenArgTypesSeq
    | NONTERM_argTypesSeq
    | NONTERM_parenTypesSeq
    | NONTERM_typesSeq
    | NONTERM_parenExprCommaSeq
    | NONTERM_exprCommaSeq
    | NONTERM_structFieldInitSeq
    | NONTERM_field
    | NONTERM_structFieldTypeSeq
    | NONTERM_unionLabelTypeSeq
    | NONTERM_label
    | NONTERM_matchCases

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | IDENT _ -> 0 
  | UNION  -> 1 
  | MATCH  -> 2 
  | WITH  -> 3 
  | STRUCT  -> 4 
  | FUN  -> 5 
  | DO  -> 6 
  | WHILE  -> 7 
  | ASSERT  -> 8 
  | PRINTLN  -> 9 
  | PRINT  -> 10 
  | READ_FLOAT  -> 11 
  | READ_INT  -> 12 
  | SEMI  -> 13 
  | EOF  -> 14 
  | COLON  -> 15 
  | LARROW  -> 16 
  | RARROW  -> 17 
  | COMMA  -> 18 
  | DOT  -> 19 
  | LET  -> 20 
  | TYPE  -> 21 
  | MUTABLE  -> 22 
  | LPAR  -> 23 
  | RPAR  -> 24 
  | LCURLY  -> 25 
  | RCURLY  -> 26 
  | IF  -> 27 
  | THEN  -> 28 
  | ELSE  -> 29 
  | EQ  -> 30 
  | LT  -> 31 
  | ANDSC  -> 32 
  | ORSC  -> 33 
  | AND  -> 34 
  | OR  -> 35 
  | NOT  -> 36 
  | TIMES  -> 37 
  | PLUS  -> 38 
  | LIT_UNIT _ -> 39 
  | LIT_STRING _ -> 40 
  | LIT_FLOAT _ -> 41 
  | LIT_INT _ -> 42 
  | LIT_BOOL _ -> 43 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IDENT 
  | 1 -> TOKEN_UNION 
  | 2 -> TOKEN_MATCH 
  | 3 -> TOKEN_WITH 
  | 4 -> TOKEN_STRUCT 
  | 5 -> TOKEN_FUN 
  | 6 -> TOKEN_DO 
  | 7 -> TOKEN_WHILE 
  | 8 -> TOKEN_ASSERT 
  | 9 -> TOKEN_PRINTLN 
  | 10 -> TOKEN_PRINT 
  | 11 -> TOKEN_READ_FLOAT 
  | 12 -> TOKEN_READ_INT 
  | 13 -> TOKEN_SEMI 
  | 14 -> TOKEN_EOF 
  | 15 -> TOKEN_COLON 
  | 16 -> TOKEN_LARROW 
  | 17 -> TOKEN_RARROW 
  | 18 -> TOKEN_COMMA 
  | 19 -> TOKEN_DOT 
  | 20 -> TOKEN_LET 
  | 21 -> TOKEN_TYPE 
  | 22 -> TOKEN_MUTABLE 
  | 23 -> TOKEN_LPAR 
  | 24 -> TOKEN_RPAR 
  | 25 -> TOKEN_LCURLY 
  | 26 -> TOKEN_RCURLY 
  | 27 -> TOKEN_IF 
  | 28 -> TOKEN_THEN 
  | 29 -> TOKEN_ELSE 
  | 30 -> TOKEN_EQ 
  | 31 -> TOKEN_LT 
  | 32 -> TOKEN_ANDSC 
  | 33 -> TOKEN_ORSC 
  | 34 -> TOKEN_AND 
  | 35 -> TOKEN_OR 
  | 36 -> TOKEN_NOT 
  | 37 -> TOKEN_TIMES 
  | 38 -> TOKEN_PLUS 
  | 39 -> TOKEN_LIT_UNIT 
  | 40 -> TOKEN_LIT_STRING 
  | 41 -> TOKEN_LIT_FLOAT 
  | 42 -> TOKEN_LIT_INT 
  | 43 -> TOKEN_LIT_BOOL 
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_curlyExpr 
    | 10 -> NONTERM_sequenceExpr 
    | 11 -> NONTERM_sequenceExpr 
    | 12 -> NONTERM_simpleExpr 
    | 13 -> NONTERM_simpleExpr 
    | 14 -> NONTERM_simpleExpr 
    | 15 -> NONTERM_simpleExpr 
    | 16 -> NONTERM_simpleExpr 
    | 17 -> NONTERM_simpleExpr 
    | 18 -> NONTERM_simpleExpr 
    | 19 -> NONTERM_ifExpr 
    | 20 -> NONTERM_ifExpr 
    | 21 -> NONTERM_orExpr 
    | 22 -> NONTERM_orExpr 
    | 23 -> NONTERM_orExpr 
    | 24 -> NONTERM_andExpr 
    | 25 -> NONTERM_andExpr 
    | 26 -> NONTERM_andExpr 
    | 27 -> NONTERM_relExpr 
    | 28 -> NONTERM_relExpr 
    | 29 -> NONTERM_relExpr 
    | 30 -> NONTERM_addExpr 
    | 31 -> NONTERM_addExpr 
    | 32 -> NONTERM_multExpr 
    | 33 -> NONTERM_multExpr 
    | 34 -> NONTERM_unaryExpr 
    | 35 -> NONTERM_unaryExpr 
    | 36 -> NONTERM_unaryExpr 
    | 37 -> NONTERM_unaryExpr 
    | 38 -> NONTERM_unaryExpr 
    | 39 -> NONTERM_unaryExpr 
    | 40 -> NONTERM_unaryExpr 
    | 41 -> NONTERM_unaryExpr 
    | 42 -> NONTERM_unaryExpr 
    | 43 -> NONTERM_unaryExpr 
    | 44 -> NONTERM_ascriptionExpr 
    | 45 -> NONTERM_ascriptionExpr 
    | 46 -> NONTERM_primary 
    | 47 -> NONTERM_primary 
    | 48 -> NONTERM_primary 
    | 49 -> NONTERM_primary 
    | 50 -> NONTERM_primary 
    | 51 -> NONTERM_primary 
    | 52 -> NONTERM_variable 
    | 53 -> NONTERM_value 
    | 54 -> NONTERM_value 
    | 55 -> NONTERM_value 
    | 56 -> NONTERM_value 
    | 57 -> NONTERM_value 
    | 58 -> NONTERM_pretype 
    | 59 -> NONTERM_pretype 
    | 60 -> NONTERM_pretype 
    | 61 -> NONTERM_pretype 
    | 62 -> NONTERM_ident 
    | 63 -> NONTERM_parenArgTypesSeq 
    | 64 -> NONTERM_parenArgTypesSeq 
    | 65 -> NONTERM_parenArgTypesSeq 
    | 66 -> NONTERM_argTypesSeq 
    | 67 -> NONTERM_argTypesSeq 
    | 68 -> NONTERM_parenTypesSeq 
    | 69 -> NONTERM_parenTypesSeq 
    | 70 -> NONTERM_parenTypesSeq 
    | 71 -> NONTERM_typesSeq 
    | 72 -> NONTERM_typesSeq 
    | 73 -> NONTERM_parenExprCommaSeq 
    | 74 -> NONTERM_parenExprCommaSeq 
    | 75 -> NONTERM_parenExprCommaSeq 
    | 76 -> NONTERM_exprCommaSeq 
    | 77 -> NONTERM_exprCommaSeq 
    | 78 -> NONTERM_structFieldInitSeq 
    | 79 -> NONTERM_structFieldInitSeq 
    | 80 -> NONTERM_field 
    | 81 -> NONTERM_structFieldTypeSeq 
    | 82 -> NONTERM_structFieldTypeSeq 
    | 83 -> NONTERM_unionLabelTypeSeq 
    | 84 -> NONTERM_unionLabelTypeSeq 
    | 85 -> NONTERM_label 
    | 86 -> NONTERM_matchCases 
    | 87 -> NONTERM_matchCases 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46 
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IDENT _ -> "IDENT" 
  | UNION  -> "UNION" 
  | MATCH  -> "MATCH" 
  | WITH  -> "WITH" 
  | STRUCT  -> "STRUCT" 
  | FUN  -> "FUN" 
  | DO  -> "DO" 
  | WHILE  -> "WHILE" 
  | ASSERT  -> "ASSERT" 
  | PRINTLN  -> "PRINTLN" 
  | PRINT  -> "PRINT" 
  | READ_FLOAT  -> "READ_FLOAT" 
  | READ_INT  -> "READ_INT" 
  | SEMI  -> "SEMI" 
  | EOF  -> "EOF" 
  | COLON  -> "COLON" 
  | LARROW  -> "LARROW" 
  | RARROW  -> "RARROW" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | LET  -> "LET" 
  | TYPE  -> "TYPE" 
  | MUTABLE  -> "MUTABLE" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | ANDSC  -> "ANDSC" 
  | ORSC  -> "ORSC" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | TIMES  -> "TIMES" 
  | PLUS  -> "PLUS" 
  | LIT_UNIT _ -> "LIT_UNIT" 
  | LIT_STRING _ -> "LIT_STRING" 
  | LIT_FLOAT _ -> "LIT_FLOAT" 
  | LIT_INT _ -> "LIT_INT" 
  | LIT_BOOL _ -> "LIT_BOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNION  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | ASSERT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | READ_FLOAT  -> (null : System.Object) 
  | READ_INT  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | LARROW  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | MUTABLE  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | ANDSC  -> (null : System.Object) 
  | ORSC  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | LIT_UNIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;10us;65535us;0us;2us;8us;9us;14us;15us;20us;21us;26us;27us;35us;36us;37us;38us;40us;41us;44us;45us;136us;137us;32us;65535us;0us;37us;8us;37us;12us;47us;14us;37us;18us;47us;20us;37us;24us;47us;26us;37us;33us;47us;35us;37us;37us;37us;40us;37us;44us;37us;49us;47us;51us;47us;53us;47us;55us;47us;57us;47us;61us;47us;63us;47us;69us;47us;71us;47us;73us;47us;108us;47us;112us;47us;116us;47us;124us;47us;136us;37us;177us;47us;183us;47us;186us;47us;206us;47us;10us;65535us;0us;39us;8us;39us;14us;39us;20us;39us;26us;39us;35us;39us;37us;39us;40us;39us;44us;39us;136us;39us;32us;65535us;0us;43us;8us;43us;12us;13us;14us;43us;18us;19us;20us;43us;24us;25us;26us;43us;33us;34us;35us;43us;37us;43us;40us;43us;44us;43us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;61us;62us;63us;64us;69us;70us;71us;72us;73us;74us;108us;109us;112us;113us;116us;117us;124us;125us;136us;43us;177us;182us;183us;182us;186us;187us;206us;207us;32us;65535us;0us;46us;8us;46us;12us;46us;14us;46us;18us;46us;20us;46us;24us;46us;26us;46us;33us;46us;35us;46us;37us;46us;40us;46us;44us;46us;49us;46us;51us;46us;53us;46us;55us;46us;57us;46us;61us;46us;63us;46us;69us;46us;71us;46us;73us;46us;108us;46us;112us;46us;116us;46us;124us;46us;136us;46us;177us;46us;183us;46us;186us;46us;206us;46us;32us;65535us;0us;75us;8us;75us;12us;75us;14us;75us;18us;75us;20us;75us;24us;75us;26us;75us;33us;75us;35us;75us;37us;75us;40us;75us;44us;75us;49us;75us;51us;75us;53us;75us;55us;75us;57us;75us;61us;75us;63us;75us;69us;75us;71us;75us;73us;75us;108us;75us;112us;75us;116us;75us;124us;75us;136us;75us;177us;75us;183us;75us;186us;75us;206us;75us;34us;65535us;0us;80us;8us;80us;12us;80us;14us;80us;18us;80us;20us;80us;24us;80us;26us;80us;33us;80us;35us;80us;37us;80us;40us;80us;44us;80us;49us;80us;51us;80us;53us;80us;55us;80us;57us;80us;61us;80us;63us;80us;69us;80us;71us;80us;73us;80us;76us;77us;78us;79us;108us;80us;112us;80us;116us;80us;124us;80us;136us;80us;177us;80us;183us;80us;186us;80us;206us;80us;36us;65535us;0us;85us;8us;85us;12us;85us;14us;85us;18us;85us;20us;85us;24us;85us;26us;85us;33us;85us;35us;85us;37us;85us;40us;85us;44us;85us;49us;85us;51us;85us;53us;85us;55us;85us;57us;85us;61us;85us;63us;85us;69us;85us;71us;85us;73us;85us;76us;85us;78us;85us;81us;82us;83us;84us;108us;85us;112us;85us;116us;85us;124us;85us;136us;85us;177us;85us;183us;85us;186us;85us;206us;85us;38us;65535us;0us;86us;8us;86us;12us;86us;14us;86us;18us;86us;20us;86us;24us;86us;26us;86us;33us;86us;35us;86us;37us;86us;40us;86us;44us;86us;49us;86us;51us;86us;53us;86us;55us;86us;57us;86us;61us;86us;63us;86us;69us;86us;71us;86us;73us;86us;76us;86us;78us;86us;81us;86us;83us;86us;87us;88us;89us;90us;108us;86us;112us;86us;116us;86us;124us;86us;136us;86us;177us;86us;183us;86us;186us;86us;206us;86us;39us;65535us;0us;93us;8us;93us;12us;93us;14us;93us;18us;93us;20us;93us;24us;93us;26us;93us;33us;93us;35us;93us;37us;93us;40us;93us;44us;93us;49us;93us;51us;93us;53us;93us;55us;93us;57us;93us;61us;93us;63us;93us;69us;93us;71us;93us;73us;93us;76us;93us;78us;93us;81us;93us;83us;93us;87us;93us;89us;93us;91us;92us;108us;93us;112us;93us;116us;93us;124us;93us;136us;93us;177us;93us;183us;93us;186us;93us;206us;93us;41us;65535us;0us;96us;8us;96us;12us;96us;14us;96us;18us;96us;20us;96us;24us;96us;26us;96us;33us;96us;35us;96us;37us;96us;40us;96us;44us;96us;49us;96us;51us;96us;53us;96us;55us;96us;57us;96us;61us;96us;63us;96us;69us;96us;71us;96us;73us;96us;76us;96us;78us;96us;81us;96us;83us;96us;87us;96us;89us;96us;91us;96us;94us;95us;97us;98us;108us;96us;112us;96us;116us;96us;124us;96us;136us;96us;177us;96us;183us;96us;186us;96us;206us;96us;41us;65535us;0us;119us;8us;119us;12us;119us;14us;119us;18us;119us;20us;119us;24us;119us;26us;119us;33us;119us;35us;119us;37us;119us;40us;119us;44us;119us;49us;119us;51us;119us;53us;119us;55us;119us;57us;119us;61us;119us;63us;119us;69us;119us;71us;119us;73us;119us;76us;119us;78us;119us;81us;119us;83us;119us;87us;119us;89us;119us;91us;119us;94us;119us;97us;119us;108us;119us;112us;119us;116us;119us;124us;119us;136us;119us;177us;119us;183us;119us;186us;119us;206us;119us;41us;65535us;0us;48us;8us;48us;12us;48us;14us;48us;18us;48us;20us;48us;24us;48us;26us;48us;33us;48us;35us;48us;37us;48us;40us;48us;44us;48us;49us;48us;51us;48us;53us;48us;55us;48us;57us;48us;61us;48us;63us;48us;69us;48us;71us;48us;73us;48us;76us;120us;78us;120us;81us;120us;83us;120us;87us;120us;89us;120us;91us;120us;94us;120us;97us;120us;108us;48us;112us;48us;116us;48us;124us;48us;136us;48us;177us;48us;183us;48us;186us;48us;206us;48us;48us;65535us;0us;128us;4us;5us;8us;128us;10us;11us;12us;128us;14us;128us;18us;128us;20us;128us;22us;23us;24us;128us;26us;128us;28us;29us;33us;128us;35us;128us;37us;128us;40us;128us;44us;128us;49us;128us;51us;128us;53us;128us;55us;128us;57us;128us;61us;128us;63us;128us;69us;128us;71us;128us;73us;128us;76us;128us;78us;128us;81us;128us;83us;128us;87us;128us;89us;128us;91us;128us;94us;128us;97us;128us;108us;128us;112us;128us;116us;128us;124us;128us;136us;128us;159us;164us;167us;164us;177us;128us;183us;128us;186us;128us;203us;204us;206us;128us;41us;65535us;0us;127us;8us;127us;12us;127us;14us;127us;18us;127us;20us;127us;24us;127us;26us;127us;33us;127us;35us;127us;37us;127us;40us;127us;44us;127us;49us;127us;51us;127us;53us;127us;55us;127us;57us;127us;61us;127us;63us;127us;69us;127us;71us;127us;73us;127us;76us;127us;78us;127us;81us;127us;83us;127us;87us;127us;89us;127us;91us;127us;94us;127us;97us;127us;108us;127us;112us;127us;116us;127us;124us;127us;136us;127us;177us;127us;183us;127us;186us;127us;206us;127us;10us;65535us;6us;7us;16us;17us;31us;32us;122us;123us;148us;149us;165us;166us;169us;174us;175us;174us;192us;193us;197us;198us;67us;65535us;0us;140us;4us;139us;6us;146us;8us;140us;10us;139us;12us;140us;14us;140us;16us;146us;18us;140us;20us;140us;22us;139us;24us;140us;26us;140us;28us;139us;31us;146us;33us;140us;35us;140us;37us;140us;40us;140us;44us;140us;49us;140us;51us;140us;53us;140us;55us;140us;57us;140us;61us;140us;63us;140us;66us;201us;69us;140us;71us;140us;73us;140us;76us;140us;78us;140us;81us;140us;83us;140us;87us;140us;89us;140us;91us;140us;94us;140us;97us;140us;108us;140us;112us;140us;116us;140us;122us;146us;124us;140us;130us;190us;133us;190us;136us;140us;148us;146us;151us;190us;155us;201us;159us;139us;165us;146us;167us;139us;169us;146us;175us;146us;177us;140us;183us;140us;186us;140us;188us;190us;192us;146us;194us;190us;197us;146us;199us;201us;203us;139us;206us;140us;208us;201us;3us;65535us;28us;60us;29us;30us;59us;60us;2us;65535us;159us;162us;167us;168us;10us;65535us;6us;147us;16us;147us;31us;147us;122us;147us;148us;147us;165us;147us;169us;147us;175us;147us;192us;147us;197us;147us;2us;65535us;169us;172us;175us;176us;2us;65535us;48us;121us;120us;121us;2us;65535us;177us;180us;183us;184us;2us;65535us;130us;131us;188us;189us;5us;65535us;130us;185us;133us;134us;151us;191us;188us;185us;194us;191us;2us;65535us;151us;152us;194us;195us;2us;65535us;155us;156us;199us;200us;45us;65535us;0us;135us;8us;135us;12us;135us;14us;135us;18us;135us;20us;135us;24us;135us;26us;135us;33us;135us;35us;135us;37us;135us;40us;135us;44us;135us;49us;135us;51us;135us;53us;135us;55us;135us;57us;135us;61us;135us;63us;135us;66us;202us;69us;135us;71us;135us;73us;135us;76us;135us;78us;135us;81us;135us;83us;135us;87us;135us;89us;135us;91us;135us;94us;135us;97us;135us;108us;135us;112us;135us;116us;135us;124us;135us;136us;135us;155us;196us;177us;135us;183us;135us;186us;135us;199us;196us;206us;135us;208us;202us;2us;65535us;66us;67us;208us;209us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;14us;47us;58us;91us;124us;157us;192us;229us;268us;308us;350us;392us;434us;483us;525us;536us;604us;608us;611us;622us;625us;628us;631us;634us;640us;643us;646us;692us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;3us;3us;4us;5us;2us;3us;4us;1us;3us;1us;3us;1us;3us;1us;3us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;5us;1us;5us;1us;5us;1us;5us;1us;5us;1us;5us;2us;6us;17us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;2us;7us;13us;1us;7us;1us;8us;1us;9us;1us;9us;1us;9us;2us;10us;11us;1us;10us;1us;10us;1us;12us;1us;13us;5us;14us;43us;44us;45us;50us;1us;14us;1us;14us;1us;15us;1us;15us;1us;15us;1us;15us;1us;16us;1us;16us;1us;16us;1us;16us;1us;17us;1us;17us;1us;17us;1us;17us;1us;18us;1us;18us;1us;18us;1us;18us;1us;18us;1us;18us;1us;19us;1us;19us;1us;19us;1us;19us;1us;19us;1us;19us;3us;20us;21us;22us;1us;21us;3us;21us;24us;25us;1us;22us;3us;22us;24us;25us;3us;23us;24us;25us;1us;24us;1us;24us;1us;25us;1us;25us;1us;26us;4us;27us;28us;29us;30us;1us;27us;2us;27us;30us;1us;28us;2us;28us;30us;1us;30us;2us;30us;32us;2us;31us;32us;1us;32us;1us;32us;1us;33us;1us;34us;1us;34us;2us;35us;36us;1us;35us;1us;36us;1us;36us;2us;37us;38us;1us;37us;1us;38us;1us;38us;1us;39us;1us;39us;1us;39us;1us;39us;1us;40us;1us;40us;1us;40us;1us;40us;1us;41us;1us;41us;1us;41us;1us;41us;1us;42us;4us;43us;44us;45us;50us;1us;43us;1us;44us;1us;44us;1us;46us;1us;46us;1us;46us;1us;47us;1us;48us;1us;49us;1us;49us;1us;49us;1us;49us;1us;50us;1us;50us;1us;51us;1us;51us;1us;51us;1us;51us;1us;52us;2us;52us;85us;1us;53us;1us;54us;1us;55us;1us;56us;1us;57us;1us;58us;1us;59us;1us;59us;1us;59us;1us;60us;1us;60us;1us;60us;1us;60us;1us;61us;1us;61us;1us;61us;1us;61us;1us;62us;2us;63us;65us;1us;63us;1us;64us;1us;65us;1us;65us;2us;66us;67us;2us;66us;67us;2us;66us;67us;1us;66us;1us;66us;2us;68us;70us;1us;68us;1us;69us;1us;70us;1us;70us;2us;71us;72us;1us;71us;1us;71us;2us;73us;75us;1us;73us;1us;74us;1us;75us;1us;75us;2us;76us;77us;1us;76us;1us;76us;2us;78us;79us;2us;78us;79us;2us;78us;79us;1us;78us;1us;78us;1us;80us;2us;81us;82us;2us;81us;82us;2us;81us;82us;1us;81us;1us;81us;2us;83us;84us;2us;83us;84us;2us;83us;84us;1us;83us;1us;83us;1us;85us;2us;86us;87us;2us;86us;87us;2us;86us;87us;2us;86us;87us;2us;86us;87us;2us;86us;87us;1us;86us;1us;86us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;24us;27us;29us;31us;33us;35us;37us;39us;41us;43us;45us;47us;49us;51us;53us;55us;57us;59us;62us;64us;66us;68us;70us;72us;74us;76us;78us;81us;83us;85us;87us;89us;91us;94us;96us;98us;100us;102us;108us;110us;112us;114us;116us;118us;120us;122us;124us;126us;128us;130us;132us;134us;136us;138us;140us;142us;144us;146us;148us;150us;152us;154us;156us;158us;160us;164us;166us;170us;172us;176us;180us;182us;184us;186us;188us;190us;195us;197us;200us;202us;205us;207us;210us;213us;215us;217us;219us;221us;223us;226us;228us;230us;232us;235us;237us;239us;241us;243us;245us;247us;249us;251us;253us;255us;257us;259us;261us;263us;265us;267us;272us;274us;276us;278us;280us;282us;284us;286us;288us;290us;292us;294us;296us;298us;300us;302us;304us;306us;308us;310us;313us;315us;317us;319us;321us;323us;325us;327us;329us;331us;333us;335us;337us;339us;341us;343us;345us;347us;349us;352us;354us;356us;358us;360us;363us;366us;369us;371us;373us;376us;378us;380us;382us;384us;387us;389us;391us;394us;396us;398us;400us;402us;405us;407us;409us;412us;415us;418us;420us;422us;424us;427us;430us;433us;435us;437us;440us;443us;446us;448us;450us;452us;455us;458us;461us;464us;467us;470us;472us;|]
let _fsyacc_action_rows = 210
let _fsyacc_actionTableElements = [|22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;49152us;1us;32768us;14us;3us;0us;16385us;1us;32768us;0us;158us;1us;32768us;30us;6us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;1us;32768us;13us;8us;22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16386us;2us;32768us;0us;158us;22us;22us;2us;32768us;15us;16us;30us;12us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;13us;14us;22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16387us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;1us;32768us;30us;18us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;13us;20us;22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16388us;1us;32768us;0us;158us;1us;32768us;30us;24us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;13us;26us;22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16389us;3us;32768us;0us;158us;23us;159us;39us;161us;2us;32768us;23us;159us;39us;161us;1us;32768us;15us;31us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;1us;32768us;30us;33us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;13us;35us;22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16390us;22us;16397us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16391us;0us;16392us;22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;26us;42us;0us;16393us;1us;16395us;13us;44us;22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16394us;0us;16396us;0us;16397us;5us;16429us;15us;122us;16us;49us;19us;133us;23us;177us;39us;179us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16398us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;6us;53us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16399us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;7us;57us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16400us;2us;32768us;23us;159us;39us;161us;1us;32768us;17us;61us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16401us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;3us;65us;1us;32768us;25us;66us;1us;32768us;0us;158us;1us;32768us;26us;68us;0us;16402us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;28us;71us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;29us;73us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16403us;2us;16404us;33us;78us;35us;76us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;2us;16405us;32us;83us;34us;81us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;2us;16406us;32us;83us;34us;81us;2us;16407us;32us;83us;34us;81us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16408us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16409us;0us;16410us;3us;16413us;30us;87us;31us;89us;38us;91us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;16411us;38us;91us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;16412us;38us;91us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;16414us;37us;94us;1us;16415us;37us;94us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16416us;0us;16417us;14us;32768us;0us;158us;4us;129us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16418us;2us;32768us;23us;101us;39us;100us;0us;16419us;1us;32768us;24us;102us;0us;16420us;2us;32768us;23us;105us;39us;104us;0us;16421us;1us;32768us;24us;106us;0us;16422us;1us;32768us;23us;108us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;24us;110us;0us;16423us;1us;32768us;23us;112us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;24us;114us;0us;16424us;1us;32768us;23us;116us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;24us;118us;0us;16425us;0us;16426us;4us;16429us;15us;122us;19us;133us;23us;177us;39us;179us;0us;16427us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;0us;16428us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;24us;126us;0us;16430us;0us;16431us;0us;16432us;1us;32768us;25us;130us;1us;32768us;0us;158us;1us;32768us;26us;132us;0us;16433us;1us;32768us;0us;158us;0us;16434us;1us;32768us;25us;136us;22us;32768us;0us;158us;2us;63us;4us;129us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;32768us;26us;138us;0us;16435us;0us;16436us;1us;16436us;25us;16469us;0us;16437us;0us;16438us;0us;16439us;0us;16440us;0us;16441us;0us;16442us;1us;32768us;17us;148us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;0us;16443us;1us;32768us;25us;151us;1us;32768us;0us;158us;1us;32768us;26us;153us;0us;16444us;1us;32768us;25us;155us;1us;32768us;0us;158us;1us;32768us;26us;157us;0us;16445us;0us;16446us;2us;32768us;0us;158us;24us;160us;0us;16447us;0us;16448us;1us;32768us;24us;163us;0us;16449us;1us;32768us;15us;165us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;1us;16451us;18us;167us;1us;32768us;0us;158us;0us;16450us;6us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;24us;170us;39us;171us;0us;16452us;0us;16453us;1us;32768us;24us;173us;0us;16454us;1us;16456us;18us;175us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;0us;16455us;21us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;24us;178us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16457us;0us;16458us;1us;32768us;24us;181us;0us;16459us;1us;16461us;18us;183us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;0us;16460us;1us;32768us;30us;186us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;16463us;13us;188us;1us;32768us;0us;158us;0us;16462us;0us;16464us;1us;32768us;15us;192us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;1us;16466us;13us;194us;1us;32768us;0us;158us;0us;16465us;1us;32768us;15us;197us;5us;32768us;0us;158us;1us;154us;4us;150us;23us;169us;39us;171us;1us;16468us;13us;199us;1us;32768us;0us;158us;0us;16467us;0us;16469us;1us;32768us;25us;203us;1us;32768us;0us;158us;1us;32768us;26us;205us;1us;32768us;17us;206us;20us;32768us;0us;158us;2us;63us;4us;129us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;124us;25us;40us;27us;69us;36us;97us;39us;145us;40us;144us;41us;143us;42us;142us;43us;141us;1us;16471us;13us;208us;1us;32768us;0us;158us;0us;16470us;|]
let _fsyacc_actionTableRowOffsets = [|0us;23us;24us;26us;27us;29us;31us;37us;39us;62us;63us;66us;69us;90us;92us;115us;116us;122us;124us;145us;147us;170us;171us;173us;175us;196us;198us;221us;222us;226us;229us;231us;237us;239us;260us;262us;285us;286us;309us;310us;311us;334us;336us;337us;339us;362us;363us;364us;365us;371us;392us;393us;414us;416us;437us;438us;459us;461us;482us;483us;486us;488us;509us;510us;531us;533us;535us;537us;539us;540us;561us;563us;584us;586us;607us;608us;611us;626us;629us;644us;647us;650us;665us;666us;681us;682us;683us;687us;702us;704us;719us;721us;736us;738us;740us;755us;756us;757us;772us;773us;776us;777us;779us;780us;783us;784us;786us;787us;789us;810us;812us;813us;815us;836us;838us;839us;841us;862us;864us;865us;866us;871us;872us;878us;879us;900us;902us;903us;904us;905us;907us;909us;911us;912us;914us;915us;917us;940us;942us;943us;944us;946us;947us;948us;949us;950us;951us;952us;954us;960us;961us;963us;965us;967us;968us;970us;972us;974us;975us;976us;979us;980us;981us;983us;984us;986us;992us;994us;996us;997us;1004us;1005us;1006us;1008us;1009us;1011us;1017us;1018us;1040us;1041us;1042us;1044us;1045us;1047us;1068us;1069us;1071us;1092us;1094us;1096us;1097us;1098us;1100us;1106us;1108us;1110us;1111us;1113us;1119us;1121us;1123us;1124us;1125us;1127us;1129us;1131us;1133us;1154us;1156us;1158us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;6us;6us;8us;7us;9us;2us;1us;3us;3us;1us;1us;1us;3us;4us;4us;4us;6us;6us;1us;3us;3us;1us;3us;3us;1us;3us;3us;1us;3us;1us;3us;1us;2us;2us;3us;2us;3us;4us;4us;4us;1us;2us;3us;1us;3us;1us;1us;4us;3us;4us;1us;1us;1us;1us;1us;1us;1us;3us;4us;4us;1us;2us;1us;3us;5us;3us;2us;1us;3us;3us;1us;2us;1us;3us;3us;1us;5us;3us;1us;5us;3us;5us;3us;1us;8us;6us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;3us;4us;4us;5us;5us;5us;5us;5us;5us;5us;6us;6us;7us;7us;7us;8us;8us;8us;9us;9us;9us;10us;10us;11us;11us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;13us;13us;14us;14us;14us;14us;14us;14us;15us;16us;16us;16us;16us;16us;17us;17us;17us;17us;18us;19us;19us;19us;20us;20us;21us;21us;21us;22us;22us;23us;23us;23us;24us;24us;25us;25us;26us;27us;27us;28us;28us;29us;30us;30us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;65535us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;16387us;65535us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;65535us;65535us;65535us;16389us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;65535us;16391us;16392us;65535us;65535us;16393us;65535us;65535us;16394us;16396us;16397us;65535us;65535us;16398us;65535us;65535us;65535us;16399us;65535us;65535us;65535us;16400us;65535us;65535us;65535us;16401us;65535us;65535us;65535us;65535us;65535us;16402us;65535us;65535us;65535us;65535us;65535us;16403us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16408us;65535us;16409us;16410us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16416us;16417us;65535us;16418us;65535us;16419us;65535us;16420us;65535us;16421us;65535us;16422us;65535us;65535us;65535us;16423us;65535us;65535us;65535us;16424us;65535us;65535us;65535us;16425us;16426us;65535us;16427us;65535us;16428us;65535us;65535us;16430us;16431us;16432us;65535us;65535us;65535us;16433us;65535us;16434us;65535us;65535us;65535us;16435us;16436us;65535us;16437us;16438us;16439us;16440us;16441us;16442us;65535us;65535us;16443us;65535us;65535us;65535us;16444us;65535us;65535us;65535us;16445us;16446us;65535us;16447us;16448us;65535us;16449us;65535us;65535us;65535us;65535us;16450us;65535us;16452us;16453us;65535us;16454us;65535us;65535us;16455us;65535us;16457us;16458us;65535us;16459us;65535us;65535us;16460us;65535us;65535us;65535us;65535us;16462us;16464us;65535us;65535us;65535us;65535us;16465us;65535us;65535us;65535us;65535us;16467us;16469us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16470us;|]
let _fsyacc_reductions = lazy [|
# 473 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.UntypedAST in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprogram));
# 482 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "src/Parser.fsy"
                                       _1 
                   )
# 103 "src/Parser.fsy"
                 : AST.UntypedAST));
# 493 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variable in
            let _4 = parseState.GetInput(4) :?> 'gentype_pretype in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "src/Parser.fsy"
                                                              
                             mkNode(parseState, 1, Expr.Type(_2, _4, _6))
                         
                   )
# 107 "src/Parser.fsy"
                 : 'gentype_expr));
# 508 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variable in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "src/Parser.fsy"
                                                                
                             mkNode(parseState, 1, Expr.Let(_2, _4, _6))
                         
                   )
# 110 "src/Parser.fsy"
                 : 'gentype_expr));
# 523 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variable in
            let _4 = parseState.GetInput(4) :?> 'gentype_pretype in
            let _6 = parseState.GetInput(6) :?> 'gentype_simpleExpr in
            let _8 = parseState.GetInput(8) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "src/Parser.fsy"
                                                                              
                             mkNode(parseState, 1, Expr.LetT(_2, _4, _6, _8))
                         
                   )
# 113 "src/Parser.fsy"
                 : 'gentype_expr));
# 539 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_variable in
            let _5 = parseState.GetInput(5) :?> 'gentype_simpleExpr in
            let _7 = parseState.GetInput(7) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "src/Parser.fsy"
                                                                        
                             mkNode(parseState, 1, Expr.LetMut(_3, _5, _7))
                         
                   )
# 116 "src/Parser.fsy"
                 : 'gentype_expr));
# 554 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variable in
            let _3 = parseState.GetInput(3) :?> 'gentype_parenArgTypesSeq in
            let _5 = parseState.GetInput(5) :?> 'gentype_pretype in
            let _7 = parseState.GetInput(7) :?> 'gentype_simpleExpr in
            let _9 = parseState.GetInput(9) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "src/Parser.fsy"
                                                                                               
                           let (_, argTypes) = List.unzip _3 // Extract argument pretypes
                           mkNode(parseState, 1, Expr.LetT(_2, mkPretypeNode(parseState, 5,
                                                                             Pretype.TFun(argTypes, _5)),
                                                           mkNode(parseState, 7, Lambda(_3, _7)), _9))
                         
                   )
# 119 "src/Parser.fsy"
                 : 'gentype_expr));
# 574 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_curlyExpr in
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "src/Parser.fsy"
                                           mkNode(parseState, 1, Expr.Seq([_1; _2])) 
                   )
# 125 "src/Parser.fsy"
                 : 'gentype_expr));
# 586 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_sequenceExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "src/Parser.fsy"
                                        
                             // If the sequence only contains one expression, we simplify the AST: we
                             // just return the expression...
                             if (List.length _1) = 1 then mkNode(parseState, 1, (_1.[0]:UntypedAST).Expr)
                             // ...otherwise, we build a Seq with all entries
                             else mkNode(parseState, 1, Expr.Seq(_1))
                         
                   )
# 126 "src/Parser.fsy"
                 : 'gentype_expr));
# 603 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "src/Parser.fsy"
                                               _2 
                   )
# 136 "src/Parser.fsy"
                 : 'gentype_curlyExpr));
# 614 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "src/Parser.fsy"
                                                
                           // If the parsed 'expr' after the semicolon is a Seq, we simplify the AST:
                           // instead of returning the Seq, we concatenate its nodes directly after
                           // the 'simpleExpr' parsed before the semicolon
                           match _3.Expr with
                           | Seq(nodes) -> _1 :: nodes
                           | _ -> _1 :: [_3]
                         
                   )
# 140 "src/Parser.fsy"
                 : 'gentype_sequenceExpr));
# 633 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "src/Parser.fsy"
                                                 [_1] 
                   )
# 148 "src/Parser.fsy"
                 : 'gentype_sequenceExpr));
# 644 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ifExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "src/Parser.fsy"
                                                 _1 
                   )
# 154 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 655 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_curlyExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "src/Parser.fsy"
                                                 _1 
                   )
# 155 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 666 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "src/Parser.fsy"
                                                      mkNode(parseState, 2, Expr.Assign(_1, _3)) 
                   )
# 156 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 678 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "src/Parser.fsy"
                                                           mkNode(parseState, 1, Expr.While(_2, _4)) 
                   )
# 157 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 690 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "src/Parser.fsy"
                                                           mkNode(parseState, 1, Expr.DoWhile(_2, _4)) 
                   )
# 159 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 702 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_parenArgTypesSeq in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "src/Parser.fsy"
                                                                   mkNode(parseState, 1, Expr.Lambda(_2, _4)) 
                   )
# 160 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 714 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            let _5 = parseState.GetInput(5) :?> 'gentype_matchCases in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "src/Parser.fsy"
                                                                           mkNode(parseState, 1,
                                                                                  Expr.Match(_2, _5)) 
                   )
# 161 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 727 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            let _6 = parseState.GetInput(6) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "src/Parser.fsy"
                                                                          mkNode(parseState, 1, Expr.If(_2, _4, _6)) 
                   )
# 166 "src/Parser.fsy"
                 : 'gentype_ifExpr));
# 740 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_orExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "src/Parser.fsy"
                                                                          _1 
                   )
# 167 "src/Parser.fsy"
                 : 'gentype_ifExpr));
# 751 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_orExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_andExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "src/Parser.fsy"
                                              mkNode(parseState, 2, Expr.Or(_1, _3)) 
                   )
# 171 "src/Parser.fsy"
                 : 'gentype_orExpr));
# 763 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_orExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_andExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "src/Parser.fsy"
                                                  // if e1 then true else e2
                          mkNode(parseState, 2, Expr.If(_1, mkBool parseState 2 true, _3)) 
                   )
# 172 "src/Parser.fsy"
                 : 'gentype_orExpr));
# 776 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_andExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "src/Parser.fsy"
                                              _1 
                   )
# 174 "src/Parser.fsy"
                 : 'gentype_orExpr));
# 787 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_andExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_relExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "src/Parser.fsy"
                                                mkNode(parseState, 2, Expr.And(_1, _3)) 
                   )
# 178 "src/Parser.fsy"
                 : 'gentype_andExpr));
# 799 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_andExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_relExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "src/Parser.fsy"
                                                    // if e1 then e2 else false
                             mkNode(parseState, 2, Expr.If(_1, _3, mkBool parseState 2 false)) 
                   )
# 179 "src/Parser.fsy"
                 : 'gentype_andExpr));
# 812 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_relExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "src/Parser.fsy"
                                                _1 
                   )
# 181 "src/Parser.fsy"
                 : 'gentype_andExpr));
# 823 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_addExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_addExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "src/Parser.fsy"
                                               mkNode(parseState, 2, Expr.Eq(_1, _3)) 
                   )
# 185 "src/Parser.fsy"
                 : 'gentype_relExpr));
# 835 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_addExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_addExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "src/Parser.fsy"
                                               mkNode(parseState, 2, Expr.Less(_1, _3)) 
                   )
# 186 "src/Parser.fsy"
                 : 'gentype_relExpr));
# 847 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_addExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "src/Parser.fsy"
                                               _1 
                   )
# 187 "src/Parser.fsy"
                 : 'gentype_relExpr));
# 858 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_addExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_multExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "src/Parser.fsy"
                                                   mkNode(parseState, 2, Expr.Add(_1, _3)) 
                   )
# 191 "src/Parser.fsy"
                 : 'gentype_addExpr));
# 870 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_multExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "src/Parser.fsy"
                                                   _1 
                   )
# 192 "src/Parser.fsy"
                 : 'gentype_addExpr));
# 881 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_multExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_unaryExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "src/Parser.fsy"
                                                     mkNode(parseState, 2, Expr.Mult(_1, _3)) 
                   )
# 196 "src/Parser.fsy"
                 : 'gentype_multExpr));
# 893 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_unaryExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "src/Parser.fsy"
                                                     _1 
                   )
# 197 "src/Parser.fsy"
                 : 'gentype_multExpr));
# 904 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_unaryExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Not(_2)) 
                   )
# 201 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 915 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.ReadInt) 
                   )
# 202 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 926 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.ReadInt) 
                   )
# 203 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 936 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.ReadFloat) 
                   )
# 204 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 947 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.ReadFloat) 
                   )
# 205 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 957 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Print(_3)) 
                   )
# 206 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 968 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.PrintLn(_3)) 
                   )
# 207 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 979 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Assertion(_3)) 
                   )
# 208 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 990 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ascriptionExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "src/Parser.fsy"
                                                         _1 
                   )
# 209 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 1001 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _2 = parseState.GetInput(2) :?> 'gentype_parenExprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Application(_1, _2))
                   )
# 210 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 1013 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "src/Parser.fsy"
                                                  mkNode(parseState, 2, Expr.Ascription(_3, _1)) 
                   )
# 214 "src/Parser.fsy"
                 : 'gentype_ascriptionExpr));
# 1025 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "src/Parser.fsy"
                                                  _1 
                   )
# 215 "src/Parser.fsy"
                 : 'gentype_ascriptionExpr));
# 1036 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "src/Parser.fsy"
                                                                    _2 
                   )
# 219 "src/Parser.fsy"
                 : 'gentype_primary));
# 1047 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "src/Parser.fsy"
                                                                    _1 
                   )
# 220 "src/Parser.fsy"
                 : 'gentype_primary));
# 1058 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "src/Parser.fsy"
                                                                    mkNode(parseState, 1, Expr.Var(_1)) 
                   )
# 221 "src/Parser.fsy"
                 : 'gentype_primary));
# 1069 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_structFieldInitSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "src/Parser.fsy"
                                                                    mkNode(parseState, 1, Expr.StructCons(_3)) 
                   )
# 222 "src/Parser.fsy"
                 : 'gentype_primary));
# 1080 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _3 = parseState.GetInput(3) :?> 'gentype_field in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "src/Parser.fsy"
                                                                    mkNode(parseState, 2, Expr.FieldSelect(_1, _3)) 
                   )
# 223 "src/Parser.fsy"
                 : 'gentype_primary));
# 1092 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "src/Parser.fsy"
                                                                    mkNode(parseState, 1, Expr.UnionCons(_1, _3)) 
                   )
# 224 "src/Parser.fsy"
                 : 'gentype_primary));
# 1104 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "src/Parser.fsy"
                                       _1 
                   )
# 228 "src/Parser.fsy"
                 : 'gentype_variable));
# 1115 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.BoolVal(_1)) 
                   )
# 232 "src/Parser.fsy"
                 : 'gentype_value));
# 1126 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.IntVal(_1)) 
                   )
# 233 "src/Parser.fsy"
                 : 'gentype_value));
# 1137 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> single in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.FloatVal(_1)) 
                   )
# 234 "src/Parser.fsy"
                 : 'gentype_value));
# 1148 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.StringVal(_1.[1..^1])) 
                   )
# 235 "src/Parser.fsy"
                 : 'gentype_value));
# 1159 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.UnitVal) 
                   )
# 236 "src/Parser.fsy"
                 : 'gentype_value));
# 1170 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "src/Parser.fsy"
                                                                    mkPretypeNode(parseState, 1,
                                                                                  Pretype.TId(_1)) 
                   )
# 240 "src/Parser.fsy"
                 : 'gentype_pretype));
# 1182 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parenTypesSeq in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "src/Parser.fsy"
                                                                    mkPretypeNode(parseState, 1,
                                                                                  Pretype.TFun(_1, _3)) 
                   )
# 242 "src/Parser.fsy"
                 : 'gentype_pretype));
# 1195 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_structFieldTypeSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "src/Parser.fsy"
                                                                    mkPretypeNode(parseState, 1,
                                                                                  Pretype.TStruct(_3)) 
                   )
# 244 "src/Parser.fsy"
                 : 'gentype_pretype));
# 1207 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_unionLabelTypeSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "src/Parser.fsy"
                                                                    mkPretypeNode(parseState, 1,
                                                                                  Pretype.TUnion(_3)) 
                   )
# 246 "src/Parser.fsy"
                 : 'gentype_pretype));
# 1219 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "src/Parser.fsy"
                                  _1 
                   )
# 251 "src/Parser.fsy"
                 : 'gentype_ident));
# 1230 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "src/Parser.fsy"
                                                  [] 
                   )
# 256 "src/Parser.fsy"
                 : 'gentype_parenArgTypesSeq));
# 1240 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "src/Parser.fsy"
                                                  [] 
                   )
# 257 "src/Parser.fsy"
                 : 'gentype_parenArgTypesSeq));
# 1251 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_argTypesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "src/Parser.fsy"
                                                  _2 
                   )
# 258 "src/Parser.fsy"
                 : 'gentype_parenArgTypesSeq));
# 1262 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            let _5 = parseState.GetInput(5) :?> 'gentype_argTypesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "src/Parser.fsy"
                                                                     (_1, _3) :: _5 
                   )
# 262 "src/Parser.fsy"
                 : 'gentype_argTypesSeq));
# 1275 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "src/Parser.fsy"
                                                                     [(_1, _3)] 
                   )
# 263 "src/Parser.fsy"
                 : 'gentype_argTypesSeq));
# 1287 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "src/Parser.fsy"
                                               [] 
                   )
# 267 "src/Parser.fsy"
                 : 'gentype_parenTypesSeq));
# 1297 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "src/Parser.fsy"
                                               [] 
                   )
# 268 "src/Parser.fsy"
                 : 'gentype_parenTypesSeq));
# 1308 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_typesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "src/Parser.fsy"
                                               _2 
                   )
# 269 "src/Parser.fsy"
                 : 'gentype_parenTypesSeq));
# 1319 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pretype in
            let _3 = parseState.GetInput(3) :?> 'gentype_typesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "src/Parser.fsy"
                                                   _1 :: _3 
                   )
# 273 "src/Parser.fsy"
                 : 'gentype_typesSeq));
# 1331 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 274 "src/Parser.fsy"
                                                   [_1] 
                   )
# 274 "src/Parser.fsy"
                 : 'gentype_typesSeq));
# 1342 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "src/Parser.fsy"
                                                   [] 
                   )
# 278 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 1352 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "src/Parser.fsy"
                                                   [] 
                   )
# 279 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 1363 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "src/Parser.fsy"
                                                   _2 
                   )
# 280 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 1374 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_exprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "src/Parser.fsy"
                                                          _1 :: _3 
                   )
# 284 "src/Parser.fsy"
                 : 'gentype_exprCommaSeq));
# 1386 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "src/Parser.fsy"
                                                          [_1] 
                   )
# 285 "src/Parser.fsy"
                 : 'gentype_exprCommaSeq));
# 1397 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            let _5 = parseState.GetInput(5) :?> 'gentype_structFieldInitSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "src/Parser.fsy"
                                                                        (_1, _3) :: _5 
                   )
# 290 "src/Parser.fsy"
                 : 'gentype_structFieldInitSeq));
# 1410 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 291 "src/Parser.fsy"
                                                                        [(_1, _3)] 
                   )
# 291 "src/Parser.fsy"
                 : 'gentype_structFieldInitSeq));
# 1422 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "src/Parser.fsy"
                                       _1 
                   )
# 295 "src/Parser.fsy"
                 : 'gentype_field));
# 1433 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            let _5 = parseState.GetInput(5) :?> 'gentype_structFieldTypeSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "src/Parser.fsy"
                                                                        (_1, _3) :: _5 
                   )
# 300 "src/Parser.fsy"
                 : 'gentype_structFieldTypeSeq));
# 1446 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "src/Parser.fsy"
                                                                        [(_1, _3)] 
                   )
# 301 "src/Parser.fsy"
                 : 'gentype_structFieldTypeSeq));
# 1458 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            let _5 = parseState.GetInput(5) :?> 'gentype_unionLabelTypeSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "src/Parser.fsy"
                                                                       (_1, _3) :: _5 
                   )
# 306 "src/Parser.fsy"
                 : 'gentype_unionLabelTypeSeq));
# 1471 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 307 "src/Parser.fsy"
                                                                       [(_1, _3)] 
                   )
# 307 "src/Parser.fsy"
                 : 'gentype_unionLabelTypeSeq));
# 1483 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "src/Parser.fsy"
                                       _1 
                   )
# 311 "src/Parser.fsy"
                 : 'gentype_label));
# 1494 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_variable in
            let _6 = parseState.GetInput(6) :?> 'gentype_simpleExpr in
            let _8 = parseState.GetInput(8) :?> 'gentype_matchCases in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "src/Parser.fsy"
                                                                                           (_1, _3, _6) :: _8 
                   )
# 316 "src/Parser.fsy"
                 : 'gentype_matchCases));
# 1508 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_variable in
            let _6 = parseState.GetInput(6) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "src/Parser.fsy"
                                                                                           [(_1, _3, _6)] 
                   )
# 317 "src/Parser.fsy"
                 : 'gentype_matchCases));
|]
# 1522 "src/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let program lexer lexbuf : AST.UntypedAST =
    engine lexer lexbuf 0 :?> _
