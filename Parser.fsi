// Signature file for parser generated by fsyacc
module Parser
type token = 
  | IDENT of (string)
  | UNION
  | MATCH
  | WITH
  | STRUCT
  | FUN
  | DO
  | WHILE
  | ASSERT
  | PRINTLN
  | PRINT
  | READ_FLOAT
  | READ_INT
  | SEMI
  | EOF
  | COLON
  | LARROW
  | RARROW
  | COMMA
  | DOT
  | LET
  | TYPE
  | MUTABLE
  | LPAR
  | RPAR
  | LCURLY
  | RCURLY
  | IF
  | THEN
  | ELSE
  | EQ
  | LT
  | ANDSC
  | ORSC
  | AND
  | OR
  | NOT
  | TIMES
  | PLUS
  | LIT_UNIT of (unit)
  | LIT_STRING of (string)
  | LIT_FLOAT of (single)
  | LIT_INT of (int)
  | LIT_BOOL of (bool)
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_UNION
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_STRUCT
    | TOKEN_FUN
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_ASSERT
    | TOKEN_PRINTLN
    | TOKEN_PRINT
    | TOKEN_READ_FLOAT
    | TOKEN_READ_INT
    | TOKEN_SEMI
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_LARROW
    | TOKEN_RARROW
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_LET
    | TOKEN_TYPE
    | TOKEN_MUTABLE
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_ANDSC
    | TOKEN_ORSC
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_TIMES
    | TOKEN_PLUS
    | TOKEN_LIT_UNIT
    | TOKEN_LIT_STRING
    | TOKEN_LIT_FLOAT
    | TOKEN_LIT_INT
    | TOKEN_LIT_BOOL
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_expr
    | NONTERM_curlyExpr
    | NONTERM_sequenceExpr
    | NONTERM_simpleExpr
    | NONTERM_ifExpr
    | NONTERM_orExpr
    | NONTERM_andExpr
    | NONTERM_relExpr
    | NONTERM_addExpr
    | NONTERM_multExpr
    | NONTERM_unaryExpr
    | NONTERM_ascriptionExpr
    | NONTERM_primary
    | NONTERM_variable
    | NONTERM_value
    | NONTERM_pretype
    | NONTERM_ident
    | NONTERM_parenArgTypesSeq
    | NONTERM_argTypesSeq
    | NONTERM_parenTypesSeq
    | NONTERM_typesSeq
    | NONTERM_parenExprCommaSeq
    | NONTERM_exprCommaSeq
    | NONTERM_structFieldInitSeq
    | NONTERM_field
    | NONTERM_structFieldTypeSeq
    | NONTERM_unionLabelTypeSeq
    | NONTERM_label
    | NONTERM_matchCases
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val program : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.UntypedAST) 
