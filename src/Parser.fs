// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "src/Parser.fsy"


// Preamble with definitions of types and/or functions.  The code appearing here
// will be placed on top of the generated parser source code.
open FSharp.Text.Parsing
open AST

// Auxiliary function to compute the position of an AST node
let pos (parseState: IParseState, inputIdx: int): AST.Position =
  let mainPos = parseState.InputStartPosition inputIdx
  let (rstart, rend) = parseState.ResultRange
  { FileName = mainPos.FileName
    Line = mainPos.pos_lnum + 1 // Line numbering from 1
    Col = mainPos.pos_cnum - mainPos.pos_bol + 1 // Line numbering from 1
    LineStart = rstart.pos_lnum + 1 // Row numbering from 1
    ColStart = rstart.pos_cnum - rstart.pos_bol + 1 // Column numbering from 1
    LineEnd = rend.pos_lnum + 1
    ColEnd = rend.pos_cnum - rend.pos_bol } // No +1: cover last-used character

// Auxiliary function to build an Abstract Syntax Tree node for a Hygge pretype.
// 'inputIdx' is the index of the symbol to use for computing the position of
// this expression (it will be used e.g. when reporting error messages).
let mkPretypeNode (parseState: IParseState, inputIdx: int, t: Pretype): PretypeNode =
  { Pos = pos(parseState, inputIdx); Pretype = t }

// Auxiliary function to build an untyped AST node for a Hygge expression.
// 'inputIdx' is the index of the symbol to use for computing the position of
// this expression (it will be used e.g. when reporting error messages).
let mkNode (parseState: IParseState, inputIdx: int, e: UntypedExpr): UntypedAST =
  { Pos = pos(parseState, inputIdx); Env = (); Type = (); Expr = e }

//SC
let mkBool (ps: IParseState) idx v =
  mkNode(ps, idx, Expr.BoolVal v)


# 43 "src/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | IDENT of (string)
  | UNION
  | MATCH
  | WITH
  | STRUCT
  | FUN
  | DO
  | WHILE
  | ASSERT
  | PRINTLN
  | PRINT
  | READ_FLOAT
  | READ_INT
  | SEMI
  | EOF
  | COLON
  | LARROW
  | RARROW
  | COMMA
  | DOT
  | LET
  | TYPE
  | MUTABLE
  | LPAR
  | RPAR
  | LCURLY
  | RCURLY
  | IF
  | THEN
  | ELSE
  | EQ
  | LT
  | COPY
  | ANDSC
  | ORSC
  | AND
  | OR
  | NOT
  | TIMES
  | PLUS
  | LIT_UNIT of (unit)
  | LIT_STRING of (string)
  | LIT_FLOAT of (single)
  | LIT_INT of (int)
  | LIT_BOOL of (bool)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_UNION
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_STRUCT
    | TOKEN_FUN
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_ASSERT
    | TOKEN_PRINTLN
    | TOKEN_PRINT
    | TOKEN_READ_FLOAT
    | TOKEN_READ_INT
    | TOKEN_SEMI
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_LARROW
    | TOKEN_RARROW
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_LET
    | TOKEN_TYPE
    | TOKEN_MUTABLE
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_COPY
    | TOKEN_ANDSC
    | TOKEN_ORSC
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_TIMES
    | TOKEN_PLUS
    | TOKEN_LIT_UNIT
    | TOKEN_LIT_STRING
    | TOKEN_LIT_FLOAT
    | TOKEN_LIT_INT
    | TOKEN_LIT_BOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_expr
    | NONTERM_curlyExpr
    | NONTERM_sequenceExpr
    | NONTERM_simpleExpr
    | NONTERM_ifExpr
    | NONTERM_orExpr
    | NONTERM_andExpr
    | NONTERM_relExpr
    | NONTERM_addExpr
    | NONTERM_multExpr
    | NONTERM_unaryExpr
    | NONTERM_ascriptionExpr
    | NONTERM_primary
    | NONTERM_variable
    | NONTERM_value
    | NONTERM_pretype
    | NONTERM_ident
    | NONTERM_parenArgTypesSeq
    | NONTERM_argTypesSeq
    | NONTERM_parenTypesSeq
    | NONTERM_typesSeq
    | NONTERM_parenExprCommaSeq
    | NONTERM_exprCommaSeq
    | NONTERM_structFieldInitSeq
    | NONTERM_field
    | NONTERM_structFieldTypeSeq
    | NONTERM_unionLabelTypeSeq
    | NONTERM_label
    | NONTERM_matchCases

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | IDENT _ -> 0 
  | UNION  -> 1 
  | MATCH  -> 2 
  | WITH  -> 3 
  | STRUCT  -> 4 
  | FUN  -> 5 
  | DO  -> 6 
  | WHILE  -> 7 
  | ASSERT  -> 8 
  | PRINTLN  -> 9 
  | PRINT  -> 10 
  | READ_FLOAT  -> 11 
  | READ_INT  -> 12 
  | SEMI  -> 13 
  | EOF  -> 14 
  | COLON  -> 15 
  | LARROW  -> 16 
  | RARROW  -> 17 
  | COMMA  -> 18 
  | DOT  -> 19 
  | LET  -> 20 
  | TYPE  -> 21 
  | MUTABLE  -> 22 
  | LPAR  -> 23 
  | RPAR  -> 24 
  | LCURLY  -> 25 
  | RCURLY  -> 26 
  | IF  -> 27 
  | THEN  -> 28 
  | ELSE  -> 29 
  | EQ  -> 30 
  | LT  -> 31 
  | COPY  -> 32 
  | ANDSC  -> 33 
  | ORSC  -> 34 
  | AND  -> 35 
  | OR  -> 36 
  | NOT  -> 37 
  | TIMES  -> 38 
  | PLUS  -> 39 
  | LIT_UNIT _ -> 40 
  | LIT_STRING _ -> 41 
  | LIT_FLOAT _ -> 42 
  | LIT_INT _ -> 43 
  | LIT_BOOL _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IDENT 
  | 1 -> TOKEN_UNION 
  | 2 -> TOKEN_MATCH 
  | 3 -> TOKEN_WITH 
  | 4 -> TOKEN_STRUCT 
  | 5 -> TOKEN_FUN 
  | 6 -> TOKEN_DO 
  | 7 -> TOKEN_WHILE 
  | 8 -> TOKEN_ASSERT 
  | 9 -> TOKEN_PRINTLN 
  | 10 -> TOKEN_PRINT 
  | 11 -> TOKEN_READ_FLOAT 
  | 12 -> TOKEN_READ_INT 
  | 13 -> TOKEN_SEMI 
  | 14 -> TOKEN_EOF 
  | 15 -> TOKEN_COLON 
  | 16 -> TOKEN_LARROW 
  | 17 -> TOKEN_RARROW 
  | 18 -> TOKEN_COMMA 
  | 19 -> TOKEN_DOT 
  | 20 -> TOKEN_LET 
  | 21 -> TOKEN_TYPE 
  | 22 -> TOKEN_MUTABLE 
  | 23 -> TOKEN_LPAR 
  | 24 -> TOKEN_RPAR 
  | 25 -> TOKEN_LCURLY 
  | 26 -> TOKEN_RCURLY 
  | 27 -> TOKEN_IF 
  | 28 -> TOKEN_THEN 
  | 29 -> TOKEN_ELSE 
  | 30 -> TOKEN_EQ 
  | 31 -> TOKEN_LT 
  | 32 -> TOKEN_COPY 
  | 33 -> TOKEN_ANDSC 
  | 34 -> TOKEN_ORSC 
  | 35 -> TOKEN_AND 
  | 36 -> TOKEN_OR 
  | 37 -> TOKEN_NOT 
  | 38 -> TOKEN_TIMES 
  | 39 -> TOKEN_PLUS 
  | 40 -> TOKEN_LIT_UNIT 
  | 41 -> TOKEN_LIT_STRING 
  | 42 -> TOKEN_LIT_FLOAT 
  | 43 -> TOKEN_LIT_INT 
  | 44 -> TOKEN_LIT_BOOL 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_curlyExpr 
    | 10 -> NONTERM_sequenceExpr 
    | 11 -> NONTERM_sequenceExpr 
    | 12 -> NONTERM_simpleExpr 
    | 13 -> NONTERM_simpleExpr 
    | 14 -> NONTERM_simpleExpr 
    | 15 -> NONTERM_simpleExpr 
    | 16 -> NONTERM_simpleExpr 
    | 17 -> NONTERM_simpleExpr 
    | 18 -> NONTERM_simpleExpr 
    | 19 -> NONTERM_ifExpr 
    | 20 -> NONTERM_ifExpr 
    | 21 -> NONTERM_orExpr 
    | 22 -> NONTERM_orExpr 
    | 23 -> NONTERM_orExpr 
    | 24 -> NONTERM_andExpr 
    | 25 -> NONTERM_andExpr 
    | 26 -> NONTERM_andExpr 
    | 27 -> NONTERM_relExpr 
    | 28 -> NONTERM_relExpr 
    | 29 -> NONTERM_relExpr 
    | 30 -> NONTERM_addExpr 
    | 31 -> NONTERM_addExpr 
    | 32 -> NONTERM_multExpr 
    | 33 -> NONTERM_multExpr 
    | 34 -> NONTERM_unaryExpr 
    | 35 -> NONTERM_unaryExpr 
    | 36 -> NONTERM_unaryExpr 
    | 37 -> NONTERM_unaryExpr 
    | 38 -> NONTERM_unaryExpr 
    | 39 -> NONTERM_unaryExpr 
    | 40 -> NONTERM_unaryExpr 
    | 41 -> NONTERM_unaryExpr 
    | 42 -> NONTERM_unaryExpr 
    | 43 -> NONTERM_unaryExpr 
    | 44 -> NONTERM_unaryExpr 
    | 45 -> NONTERM_ascriptionExpr 
    | 46 -> NONTERM_ascriptionExpr 
    | 47 -> NONTERM_primary 
    | 48 -> NONTERM_primary 
    | 49 -> NONTERM_primary 
    | 50 -> NONTERM_primary 
    | 51 -> NONTERM_primary 
    | 52 -> NONTERM_primary 
    | 53 -> NONTERM_variable 
    | 54 -> NONTERM_value 
    | 55 -> NONTERM_value 
    | 56 -> NONTERM_value 
    | 57 -> NONTERM_value 
    | 58 -> NONTERM_value 
    | 59 -> NONTERM_pretype 
    | 60 -> NONTERM_pretype 
    | 61 -> NONTERM_pretype 
    | 62 -> NONTERM_pretype 
    | 63 -> NONTERM_ident 
    | 64 -> NONTERM_parenArgTypesSeq 
    | 65 -> NONTERM_parenArgTypesSeq 
    | 66 -> NONTERM_parenArgTypesSeq 
    | 67 -> NONTERM_argTypesSeq 
    | 68 -> NONTERM_argTypesSeq 
    | 69 -> NONTERM_parenTypesSeq 
    | 70 -> NONTERM_parenTypesSeq 
    | 71 -> NONTERM_parenTypesSeq 
    | 72 -> NONTERM_typesSeq 
    | 73 -> NONTERM_typesSeq 
    | 74 -> NONTERM_parenExprCommaSeq 
    | 75 -> NONTERM_parenExprCommaSeq 
    | 76 -> NONTERM_parenExprCommaSeq 
    | 77 -> NONTERM_exprCommaSeq 
    | 78 -> NONTERM_exprCommaSeq 
    | 79 -> NONTERM_structFieldInitSeq 
    | 80 -> NONTERM_structFieldInitSeq 
    | 81 -> NONTERM_field 
    | 82 -> NONTERM_structFieldTypeSeq 
    | 83 -> NONTERM_structFieldTypeSeq 
    | 84 -> NONTERM_unionLabelTypeSeq 
    | 85 -> NONTERM_unionLabelTypeSeq 
    | 86 -> NONTERM_label 
    | 87 -> NONTERM_matchCases 
    | 88 -> NONTERM_matchCases 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IDENT _ -> "IDENT" 
  | UNION  -> "UNION" 
  | MATCH  -> "MATCH" 
  | WITH  -> "WITH" 
  | STRUCT  -> "STRUCT" 
  | FUN  -> "FUN" 
  | DO  -> "DO" 
  | WHILE  -> "WHILE" 
  | ASSERT  -> "ASSERT" 
  | PRINTLN  -> "PRINTLN" 
  | PRINT  -> "PRINT" 
  | READ_FLOAT  -> "READ_FLOAT" 
  | READ_INT  -> "READ_INT" 
  | SEMI  -> "SEMI" 
  | EOF  -> "EOF" 
  | COLON  -> "COLON" 
  | LARROW  -> "LARROW" 
  | RARROW  -> "RARROW" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | LET  -> "LET" 
  | TYPE  -> "TYPE" 
  | MUTABLE  -> "MUTABLE" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | COPY  -> "COPY" 
  | ANDSC  -> "ANDSC" 
  | ORSC  -> "ORSC" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | TIMES  -> "TIMES" 
  | PLUS  -> "PLUS" 
  | LIT_UNIT _ -> "LIT_UNIT" 
  | LIT_STRING _ -> "LIT_STRING" 
  | LIT_FLOAT _ -> "LIT_FLOAT" 
  | LIT_INT _ -> "LIT_INT" 
  | LIT_BOOL _ -> "LIT_BOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNION  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | ASSERT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | READ_FLOAT  -> (null : System.Object) 
  | READ_INT  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | LARROW  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | MUTABLE  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | COPY  -> (null : System.Object) 
  | ANDSC  -> (null : System.Object) 
  | ORSC  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | LIT_UNIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;10us;65535us;0us;2us;8us;9us;14us;15us;20us;21us;26us;27us;35us;36us;37us;38us;40us;41us;44us;45us;140us;141us;33us;65535us;0us;37us;8us;37us;12us;47us;14us;37us;18us;47us;20us;37us;24us;47us;26us;37us;33us;47us;35us;37us;37us;37us;40us;37us;44us;37us;49us;47us;51us;47us;53us;47us;55us;47us;57us;47us;61us;47us;63us;47us;69us;47us;71us;47us;73us;47us;108us;47us;112us;47us;116us;47us;120us;47us;128us;47us;140us;37us;181us;47us;187us;47us;190us;47us;210us;47us;10us;65535us;0us;39us;8us;39us;14us;39us;20us;39us;26us;39us;35us;39us;37us;39us;40us;39us;44us;39us;140us;39us;33us;65535us;0us;43us;8us;43us;12us;13us;14us;43us;18us;19us;20us;43us;24us;25us;26us;43us;33us;34us;35us;43us;37us;43us;40us;43us;44us;43us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;61us;62us;63us;64us;69us;70us;71us;72us;73us;74us;108us;109us;112us;113us;116us;117us;120us;121us;128us;129us;140us;43us;181us;186us;187us;186us;190us;191us;210us;211us;33us;65535us;0us;46us;8us;46us;12us;46us;14us;46us;18us;46us;20us;46us;24us;46us;26us;46us;33us;46us;35us;46us;37us;46us;40us;46us;44us;46us;49us;46us;51us;46us;53us;46us;55us;46us;57us;46us;61us;46us;63us;46us;69us;46us;71us;46us;73us;46us;108us;46us;112us;46us;116us;46us;120us;46us;128us;46us;140us;46us;181us;46us;187us;46us;190us;46us;210us;46us;33us;65535us;0us;75us;8us;75us;12us;75us;14us;75us;18us;75us;20us;75us;24us;75us;26us;75us;33us;75us;35us;75us;37us;75us;40us;75us;44us;75us;49us;75us;51us;75us;53us;75us;55us;75us;57us;75us;61us;75us;63us;75us;69us;75us;71us;75us;73us;75us;108us;75us;112us;75us;116us;75us;120us;75us;128us;75us;140us;75us;181us;75us;187us;75us;190us;75us;210us;75us;35us;65535us;0us;80us;8us;80us;12us;80us;14us;80us;18us;80us;20us;80us;24us;80us;26us;80us;33us;80us;35us;80us;37us;80us;40us;80us;44us;80us;49us;80us;51us;80us;53us;80us;55us;80us;57us;80us;61us;80us;63us;80us;69us;80us;71us;80us;73us;80us;76us;77us;78us;79us;108us;80us;112us;80us;116us;80us;120us;80us;128us;80us;140us;80us;181us;80us;187us;80us;190us;80us;210us;80us;37us;65535us;0us;85us;8us;85us;12us;85us;14us;85us;18us;85us;20us;85us;24us;85us;26us;85us;33us;85us;35us;85us;37us;85us;40us;85us;44us;85us;49us;85us;51us;85us;53us;85us;55us;85us;57us;85us;61us;85us;63us;85us;69us;85us;71us;85us;73us;85us;76us;85us;78us;85us;81us;82us;83us;84us;108us;85us;112us;85us;116us;85us;120us;85us;128us;85us;140us;85us;181us;85us;187us;85us;190us;85us;210us;85us;39us;65535us;0us;86us;8us;86us;12us;86us;14us;86us;18us;86us;20us;86us;24us;86us;26us;86us;33us;86us;35us;86us;37us;86us;40us;86us;44us;86us;49us;86us;51us;86us;53us;86us;55us;86us;57us;86us;61us;86us;63us;86us;69us;86us;71us;86us;73us;86us;76us;86us;78us;86us;81us;86us;83us;86us;87us;88us;89us;90us;108us;86us;112us;86us;116us;86us;120us;86us;128us;86us;140us;86us;181us;86us;187us;86us;190us;86us;210us;86us;40us;65535us;0us;93us;8us;93us;12us;93us;14us;93us;18us;93us;20us;93us;24us;93us;26us;93us;33us;93us;35us;93us;37us;93us;40us;93us;44us;93us;49us;93us;51us;93us;53us;93us;55us;93us;57us;93us;61us;93us;63us;93us;69us;93us;71us;93us;73us;93us;76us;93us;78us;93us;81us;93us;83us;93us;87us;93us;89us;93us;91us;92us;108us;93us;112us;93us;116us;93us;120us;93us;128us;93us;140us;93us;181us;93us;187us;93us;190us;93us;210us;93us;42us;65535us;0us;96us;8us;96us;12us;96us;14us;96us;18us;96us;20us;96us;24us;96us;26us;96us;33us;96us;35us;96us;37us;96us;40us;96us;44us;96us;49us;96us;51us;96us;53us;96us;55us;96us;57us;96us;61us;96us;63us;96us;69us;96us;71us;96us;73us;96us;76us;96us;78us;96us;81us;96us;83us;96us;87us;96us;89us;96us;91us;96us;94us;95us;97us;98us;108us;96us;112us;96us;116us;96us;120us;96us;128us;96us;140us;96us;181us;96us;187us;96us;190us;96us;210us;96us;42us;65535us;0us;123us;8us;123us;12us;123us;14us;123us;18us;123us;20us;123us;24us;123us;26us;123us;33us;123us;35us;123us;37us;123us;40us;123us;44us;123us;49us;123us;51us;123us;53us;123us;55us;123us;57us;123us;61us;123us;63us;123us;69us;123us;71us;123us;73us;123us;76us;123us;78us;123us;81us;123us;83us;123us;87us;123us;89us;123us;91us;123us;94us;123us;97us;123us;108us;123us;112us;123us;116us;123us;120us;123us;128us;123us;140us;123us;181us;123us;187us;123us;190us;123us;210us;123us;42us;65535us;0us;48us;8us;48us;12us;48us;14us;48us;18us;48us;20us;48us;24us;48us;26us;48us;33us;48us;35us;48us;37us;48us;40us;48us;44us;48us;49us;48us;51us;48us;53us;48us;55us;48us;57us;48us;61us;48us;63us;48us;69us;48us;71us;48us;73us;48us;76us;124us;78us;124us;81us;124us;83us;124us;87us;124us;89us;124us;91us;124us;94us;124us;97us;124us;108us;48us;112us;48us;116us;48us;120us;48us;128us;48us;140us;48us;181us;48us;187us;48us;190us;48us;210us;48us;49us;65535us;0us;132us;4us;5us;8us;132us;10us;11us;12us;132us;14us;132us;18us;132us;20us;132us;22us;23us;24us;132us;26us;132us;28us;29us;33us;132us;35us;132us;37us;132us;40us;132us;44us;132us;49us;132us;51us;132us;53us;132us;55us;132us;57us;132us;61us;132us;63us;132us;69us;132us;71us;132us;73us;132us;76us;132us;78us;132us;81us;132us;83us;132us;87us;132us;89us;132us;91us;132us;94us;132us;97us;132us;108us;132us;112us;132us;116us;132us;120us;132us;128us;132us;140us;132us;163us;168us;171us;168us;181us;132us;187us;132us;190us;132us;207us;208us;210us;132us;42us;65535us;0us;131us;8us;131us;12us;131us;14us;131us;18us;131us;20us;131us;24us;131us;26us;131us;33us;131us;35us;131us;37us;131us;40us;131us;44us;131us;49us;131us;51us;131us;53us;131us;55us;131us;57us;131us;61us;131us;63us;131us;69us;131us;71us;131us;73us;131us;76us;131us;78us;131us;81us;131us;83us;131us;87us;131us;89us;131us;91us;131us;94us;131us;97us;131us;108us;131us;112us;131us;116us;131us;120us;131us;128us;131us;140us;131us;181us;131us;187us;131us;190us;131us;210us;131us;10us;65535us;6us;7us;16us;17us;31us;32us;126us;127us;152us;153us;169us;170us;173us;178us;179us;178us;196us;197us;201us;202us;68us;65535us;0us;144us;4us;143us;6us;150us;8us;144us;10us;143us;12us;144us;14us;144us;16us;150us;18us;144us;20us;144us;22us;143us;24us;144us;26us;144us;28us;143us;31us;150us;33us;144us;35us;144us;37us;144us;40us;144us;44us;144us;49us;144us;51us;144us;53us;144us;55us;144us;57us;144us;61us;144us;63us;144us;66us;205us;69us;144us;71us;144us;73us;144us;76us;144us;78us;144us;81us;144us;83us;144us;87us;144us;89us;144us;91us;144us;94us;144us;97us;144us;108us;144us;112us;144us;116us;144us;120us;144us;126us;150us;128us;144us;134us;194us;137us;194us;140us;144us;152us;150us;155us;194us;159us;205us;163us;143us;169us;150us;171us;143us;173us;150us;179us;150us;181us;144us;187us;144us;190us;144us;192us;194us;196us;150us;198us;194us;201us;150us;203us;205us;207us;143us;210us;144us;212us;205us;3us;65535us;28us;60us;29us;30us;59us;60us;2us;65535us;163us;166us;171us;172us;10us;65535us;6us;151us;16us;151us;31us;151us;126us;151us;152us;151us;169us;151us;173us;151us;179us;151us;196us;151us;201us;151us;2us;65535us;173us;176us;179us;180us;2us;65535us;48us;125us;124us;125us;2us;65535us;181us;184us;187us;188us;2us;65535us;134us;135us;192us;193us;5us;65535us;134us;189us;137us;138us;155us;195us;192us;189us;198us;195us;2us;65535us;155us;156us;198us;199us;2us;65535us;159us;160us;203us;204us;46us;65535us;0us;139us;8us;139us;12us;139us;14us;139us;18us;139us;20us;139us;24us;139us;26us;139us;33us;139us;35us;139us;37us;139us;40us;139us;44us;139us;49us;139us;51us;139us;53us;139us;55us;139us;57us;139us;61us;139us;63us;139us;66us;206us;69us;139us;71us;139us;73us;139us;76us;139us;78us;139us;81us;139us;83us;139us;87us;139us;89us;139us;91us;139us;94us;139us;97us;139us;108us;139us;112us;139us;116us;139us;120us;139us;128us;139us;140us;139us;159us;200us;181us;139us;187us;139us;190us;139us;203us;200us;210us;139us;212us;206us;2us;65535us;66us;67us;212us;213us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;14us;48us;59us;93us;127us;161us;197us;235us;275us;316us;359us;402us;445us;495us;538us;549us;618us;622us;625us;636us;639us;642us;645us;648us;654us;657us;660us;707us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;3us;3us;4us;5us;2us;3us;4us;1us;3us;1us;3us;1us;3us;1us;3us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;5us;1us;5us;1us;5us;1us;5us;1us;5us;1us;5us;2us;6us;17us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;2us;7us;13us;1us;7us;1us;8us;1us;9us;1us;9us;1us;9us;2us;10us;11us;1us;10us;1us;10us;1us;12us;1us;13us;5us;14us;44us;45us;46us;51us;1us;14us;1us;14us;1us;15us;1us;15us;1us;15us;1us;15us;1us;16us;1us;16us;1us;16us;1us;16us;1us;17us;1us;17us;1us;17us;1us;17us;1us;18us;1us;18us;1us;18us;1us;18us;1us;18us;1us;18us;1us;19us;1us;19us;1us;19us;1us;19us;1us;19us;1us;19us;3us;20us;21us;22us;1us;21us;3us;21us;24us;25us;1us;22us;3us;22us;24us;25us;3us;23us;24us;25us;1us;24us;1us;24us;1us;25us;1us;25us;1us;26us;4us;27us;28us;29us;30us;1us;27us;2us;27us;30us;1us;28us;2us;28us;30us;1us;30us;2us;30us;32us;2us;31us;32us;1us;32us;1us;32us;1us;33us;1us;34us;1us;34us;2us;35us;36us;1us;35us;1us;36us;1us;36us;2us;37us;38us;1us;37us;1us;38us;1us;38us;1us;39us;1us;39us;1us;39us;1us;39us;1us;40us;1us;40us;1us;40us;1us;40us;1us;41us;1us;41us;1us;41us;1us;41us;1us;42us;1us;42us;1us;42us;1us;42us;1us;43us;4us;44us;45us;46us;51us;1us;44us;1us;45us;1us;45us;1us;47us;1us;47us;1us;47us;1us;48us;1us;49us;1us;50us;1us;50us;1us;50us;1us;50us;1us;51us;1us;51us;1us;52us;1us;52us;1us;52us;1us;52us;1us;53us;2us;53us;86us;1us;54us;1us;55us;1us;56us;1us;57us;1us;58us;1us;59us;1us;60us;1us;60us;1us;60us;1us;61us;1us;61us;1us;61us;1us;61us;1us;62us;1us;62us;1us;62us;1us;62us;1us;63us;2us;64us;66us;1us;64us;1us;65us;1us;66us;1us;66us;2us;67us;68us;2us;67us;68us;2us;67us;68us;1us;67us;1us;67us;2us;69us;71us;1us;69us;1us;70us;1us;71us;1us;71us;2us;72us;73us;1us;72us;1us;72us;2us;74us;76us;1us;74us;1us;75us;1us;76us;1us;76us;2us;77us;78us;1us;77us;1us;77us;2us;79us;80us;2us;79us;80us;2us;79us;80us;1us;79us;1us;79us;1us;81us;2us;82us;83us;2us;82us;83us;2us;82us;83us;1us;82us;1us;82us;2us;84us;85us;2us;84us;85us;2us;84us;85us;1us;84us;1us;84us;1us;86us;2us;87us;88us;2us;87us;88us;2us;87us;88us;2us;87us;88us;2us;87us;88us;2us;87us;88us;1us;87us;1us;87us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;24us;27us;29us;31us;33us;35us;37us;39us;41us;43us;45us;47us;49us;51us;53us;55us;57us;59us;62us;64us;66us;68us;70us;72us;74us;76us;78us;81us;83us;85us;87us;89us;91us;94us;96us;98us;100us;102us;108us;110us;112us;114us;116us;118us;120us;122us;124us;126us;128us;130us;132us;134us;136us;138us;140us;142us;144us;146us;148us;150us;152us;154us;156us;158us;160us;164us;166us;170us;172us;176us;180us;182us;184us;186us;188us;190us;195us;197us;200us;202us;205us;207us;210us;213us;215us;217us;219us;221us;223us;226us;228us;230us;232us;235us;237us;239us;241us;243us;245us;247us;249us;251us;253us;255us;257us;259us;261us;263us;265us;267us;269us;271us;273us;275us;280us;282us;284us;286us;288us;290us;292us;294us;296us;298us;300us;302us;304us;306us;308us;310us;312us;314us;316us;318us;321us;323us;325us;327us;329us;331us;333us;335us;337us;339us;341us;343us;345us;347us;349us;351us;353us;355us;357us;360us;362us;364us;366us;368us;371us;374us;377us;379us;381us;384us;386us;388us;390us;392us;395us;397us;399us;402us;404us;406us;408us;410us;413us;415us;417us;420us;423us;426us;428us;430us;432us;435us;438us;441us;443us;445us;448us;451us;454us;456us;458us;460us;463us;466us;469us;472us;475us;478us;480us;|]
let _fsyacc_action_rows = 214
let _fsyacc_actionTableElements = [|23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;49152us;1us;32768us;14us;3us;0us;16385us;1us;32768us;0us;162us;1us;32768us;30us;6us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;1us;32768us;13us;8us;23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16386us;2us;32768us;0us;162us;22us;22us;2us;32768us;15us;16us;30us;12us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;13us;14us;23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16387us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;1us;32768us;30us;18us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;13us;20us;23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16388us;1us;32768us;0us;162us;1us;32768us;30us;24us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;13us;26us;23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16389us;3us;32768us;0us;162us;23us;163us;40us;165us;2us;32768us;23us;163us;40us;165us;1us;32768us;15us;31us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;1us;32768us;30us;33us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;13us;35us;23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16390us;23us;16397us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16391us;0us;16392us;23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;26us;42us;0us;16393us;1us;16395us;13us;44us;23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16394us;0us;16396us;0us;16397us;5us;16430us;15us;126us;16us;49us;19us;137us;23us;181us;40us;183us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16398us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;6us;53us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16399us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;7us;57us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16400us;2us;32768us;23us;163us;40us;165us;1us;32768us;17us;61us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16401us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;3us;65us;1us;32768us;25us;66us;1us;32768us;0us;162us;1us;32768us;26us;68us;0us;16402us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;28us;71us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;29us;73us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16403us;2us;16404us;34us;78us;36us;76us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;2us;16405us;33us;83us;35us;81us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;2us;16406us;33us;83us;35us;81us;2us;16407us;33us;83us;35us;81us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16408us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16409us;0us;16410us;3us;16413us;30us;87us;31us;89us;39us;91us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;16411us;39us;91us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;16412us;39us;91us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;16414us;38us;94us;1us;16415us;38us;94us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16416us;0us;16417us;15us;32768us;0us;162us;4us;133us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16418us;2us;32768us;23us;101us;40us;100us;0us;16419us;1us;32768us;24us;102us;0us;16420us;2us;32768us;23us;105us;40us;104us;0us;16421us;1us;32768us;24us;106us;0us;16422us;1us;32768us;23us;108us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;24us;110us;0us;16423us;1us;32768us;23us;112us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;24us;114us;0us;16424us;1us;32768us;23us;116us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;24us;118us;0us;16425us;1us;32768us;23us;120us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;24us;122us;0us;16426us;0us;16427us;4us;16430us;15us;126us;19us;137us;23us;181us;40us;183us;0us;16428us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;0us;16429us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;24us;130us;0us;16431us;0us;16432us;0us;16433us;1us;32768us;25us;134us;1us;32768us;0us;162us;1us;32768us;26us;136us;0us;16434us;1us;32768us;0us;162us;0us;16435us;1us;32768us;25us;140us;23us;32768us;0us;162us;2us;63us;4us;133us;5us;28us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;20us;10us;21us;4us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;32768us;26us;142us;0us;16436us;0us;16437us;1us;16437us;25us;16470us;0us;16438us;0us;16439us;0us;16440us;0us;16441us;0us;16442us;0us;16443us;1us;32768us;17us;152us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;0us;16444us;1us;32768us;25us;155us;1us;32768us;0us;162us;1us;32768us;26us;157us;0us;16445us;1us;32768us;25us;159us;1us;32768us;0us;162us;1us;32768us;26us;161us;0us;16446us;0us;16447us;2us;32768us;0us;162us;24us;164us;0us;16448us;0us;16449us;1us;32768us;24us;167us;0us;16450us;1us;32768us;15us;169us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;1us;16452us;18us;171us;1us;32768us;0us;162us;0us;16451us;6us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;24us;174us;40us;175us;0us;16453us;0us;16454us;1us;32768us;24us;177us;0us;16455us;1us;16457us;18us;179us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;0us;16456us;22us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;24us;182us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16458us;0us;16459us;1us;32768us;24us;185us;0us;16460us;1us;16462us;18us;187us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;0us;16461us;1us;32768us;30us;190us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;16464us;13us;192us;1us;32768us;0us;162us;0us;16463us;0us;16465us;1us;32768us;15us;196us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;1us;16467us;13us;198us;1us;32768us;0us;162us;0us;16466us;1us;32768us;15us;201us;5us;32768us;0us;162us;1us;158us;4us;154us;23us;173us;40us;175us;1us;16469us;13us;203us;1us;32768us;0us;162us;0us;16468us;0us;16470us;1us;32768us;25us;207us;1us;32768us;0us;162us;1us;32768us;26us;209us;1us;32768us;17us;210us;21us;32768us;0us;162us;2us;63us;4us;133us;5us;59us;6us;55us;7us;51us;8us;115us;9us;111us;10us;107us;11us;103us;12us;99us;23us;128us;25us;40us;27us;69us;32us;119us;37us;97us;40us;149us;41us;148us;42us;147us;43us;146us;44us;145us;1us;16472us;13us;212us;1us;32768us;0us;162us;0us;16471us;|]
let _fsyacc_actionTableRowOffsets = [|0us;24us;25us;27us;28us;30us;32us;38us;40us;64us;65us;68us;71us;93us;95us;119us;120us;126us;128us;150us;152us;176us;177us;179us;181us;203us;205us;229us;230us;234us;237us;239us;245us;247us;269us;271us;295us;296us;320us;321us;322us;346us;348us;349us;351us;375us;376us;377us;378us;384us;406us;407us;429us;431us;453us;454us;476us;478us;500us;501us;504us;506us;528us;529us;551us;553us;555us;557us;559us;560us;582us;584us;606us;608us;630us;631us;634us;650us;653us;669us;672us;675us;691us;692us;708us;709us;710us;714us;730us;732us;748us;750us;766us;768us;770us;786us;787us;788us;804us;805us;808us;809us;811us;812us;815us;816us;818us;819us;821us;843us;845us;846us;848us;870us;872us;873us;875us;897us;899us;900us;902us;924us;926us;927us;928us;933us;934us;940us;941us;963us;965us;966us;967us;968us;970us;972us;974us;975us;977us;978us;980us;1004us;1006us;1007us;1008us;1010us;1011us;1012us;1013us;1014us;1015us;1016us;1018us;1024us;1025us;1027us;1029us;1031us;1032us;1034us;1036us;1038us;1039us;1040us;1043us;1044us;1045us;1047us;1048us;1050us;1056us;1058us;1060us;1061us;1068us;1069us;1070us;1072us;1073us;1075us;1081us;1082us;1105us;1106us;1107us;1109us;1110us;1112us;1134us;1135us;1137us;1159us;1161us;1163us;1164us;1165us;1167us;1173us;1175us;1177us;1178us;1180us;1186us;1188us;1190us;1191us;1192us;1194us;1196us;1198us;1200us;1222us;1224us;1226us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;6us;6us;8us;7us;9us;2us;1us;3us;3us;1us;1us;1us;3us;4us;4us;4us;6us;6us;1us;3us;3us;1us;3us;3us;1us;3us;3us;1us;3us;1us;3us;1us;2us;2us;3us;2us;3us;4us;4us;4us;4us;1us;2us;3us;1us;3us;1us;1us;4us;3us;4us;1us;1us;1us;1us;1us;1us;1us;3us;4us;4us;1us;2us;1us;3us;5us;3us;2us;1us;3us;3us;1us;2us;1us;3us;3us;1us;5us;3us;1us;5us;3us;5us;3us;1us;8us;6us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;3us;4us;4us;5us;5us;5us;5us;5us;5us;5us;6us;6us;7us;7us;7us;8us;8us;8us;9us;9us;9us;10us;10us;11us;11us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;13us;13us;14us;14us;14us;14us;14us;14us;15us;16us;16us;16us;16us;16us;17us;17us;17us;17us;18us;19us;19us;19us;20us;20us;21us;21us;21us;22us;22us;23us;23us;23us;24us;24us;25us;25us;26us;27us;27us;28us;28us;29us;30us;30us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;65535us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;16387us;65535us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;65535us;65535us;65535us;16389us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;65535us;16391us;16392us;65535us;65535us;16393us;65535us;65535us;16394us;16396us;16397us;65535us;65535us;16398us;65535us;65535us;65535us;16399us;65535us;65535us;65535us;16400us;65535us;65535us;65535us;16401us;65535us;65535us;65535us;65535us;65535us;16402us;65535us;65535us;65535us;65535us;65535us;16403us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16408us;65535us;16409us;16410us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16416us;16417us;65535us;16418us;65535us;16419us;65535us;16420us;65535us;16421us;65535us;16422us;65535us;65535us;65535us;16423us;65535us;65535us;65535us;16424us;65535us;65535us;65535us;16425us;65535us;65535us;65535us;16426us;16427us;65535us;16428us;65535us;16429us;65535us;65535us;16431us;16432us;16433us;65535us;65535us;65535us;16434us;65535us;16435us;65535us;65535us;65535us;16436us;16437us;65535us;16438us;16439us;16440us;16441us;16442us;16443us;65535us;65535us;16444us;65535us;65535us;65535us;16445us;65535us;65535us;65535us;16446us;16447us;65535us;16448us;16449us;65535us;16450us;65535us;65535us;65535us;65535us;16451us;65535us;16453us;16454us;65535us;16455us;65535us;65535us;16456us;65535us;16458us;16459us;65535us;16460us;65535us;65535us;16461us;65535us;65535us;65535us;65535us;16463us;16465us;65535us;65535us;65535us;65535us;16466us;65535us;65535us;65535us;65535us;16468us;16470us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16471us;|]
let _fsyacc_reductions = lazy [|
# 480 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.UntypedAST in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprogram));
# 489 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "src/Parser.fsy"
                                       _1 
                   )
# 107 "src/Parser.fsy"
                 : AST.UntypedAST));
# 500 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variable in
            let _4 = parseState.GetInput(4) :?> 'gentype_pretype in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "src/Parser.fsy"
                                                              
                             mkNode(parseState, 1, Expr.Type(_2, _4, _6))
                         
                   )
# 111 "src/Parser.fsy"
                 : 'gentype_expr));
# 515 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variable in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "src/Parser.fsy"
                                                                
                             mkNode(parseState, 1, Expr.Let(_2, _4, _6))
                         
                   )
# 114 "src/Parser.fsy"
                 : 'gentype_expr));
# 530 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variable in
            let _4 = parseState.GetInput(4) :?> 'gentype_pretype in
            let _6 = parseState.GetInput(6) :?> 'gentype_simpleExpr in
            let _8 = parseState.GetInput(8) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "src/Parser.fsy"
                                                                              
                             mkNode(parseState, 1, Expr.LetT(_2, _4, _6, _8))
                         
                   )
# 117 "src/Parser.fsy"
                 : 'gentype_expr));
# 546 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_variable in
            let _5 = parseState.GetInput(5) :?> 'gentype_simpleExpr in
            let _7 = parseState.GetInput(7) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "src/Parser.fsy"
                                                                        
                             mkNode(parseState, 1, Expr.LetMut(_3, _5, _7))
                         
                   )
# 120 "src/Parser.fsy"
                 : 'gentype_expr));
# 561 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_variable in
            let _3 = parseState.GetInput(3) :?> 'gentype_parenArgTypesSeq in
            let _5 = parseState.GetInput(5) :?> 'gentype_pretype in
            let _7 = parseState.GetInput(7) :?> 'gentype_simpleExpr in
            let _9 = parseState.GetInput(9) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "src/Parser.fsy"
                                                                                               
                           let (_, argTypes) = List.unzip _3 // Extract argument pretypes
                           mkNode(parseState, 1, Expr.LetT(_2, mkPretypeNode(parseState, 5,
                                                                             Pretype.TFun(argTypes, _5)),
                                                           mkNode(parseState, 7, Lambda(_3, _7)), _9))
                         
                   )
# 123 "src/Parser.fsy"
                 : 'gentype_expr));
# 581 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_curlyExpr in
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "src/Parser.fsy"
                                           mkNode(parseState, 1, Expr.Seq([_1; _2])) 
                   )
# 129 "src/Parser.fsy"
                 : 'gentype_expr));
# 593 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_sequenceExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "src/Parser.fsy"
                                        
                             // If the sequence only contains one expression, we simplify the AST: we
                             // just return the expression...
                             if (List.length _1) = 1 then mkNode(parseState, 1, (_1.[0]:UntypedAST).Expr)
                             // ...otherwise, we build a Seq with all entries
                             else mkNode(parseState, 1, Expr.Seq(_1))
                         
                   )
# 130 "src/Parser.fsy"
                 : 'gentype_expr));
# 610 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "src/Parser.fsy"
                                               _2 
                   )
# 140 "src/Parser.fsy"
                 : 'gentype_curlyExpr));
# 621 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "src/Parser.fsy"
                                                
                           // If the parsed 'expr' after the semicolon is a Seq, we simplify the AST:
                           // instead of returning the Seq, we concatenate its nodes directly after
                           // the 'simpleExpr' parsed before the semicolon
                           match _3.Expr with
                           | Seq(nodes) -> _1 :: nodes
                           | _ -> _1 :: [_3]
                         
                   )
# 144 "src/Parser.fsy"
                 : 'gentype_sequenceExpr));
# 640 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "src/Parser.fsy"
                                                 [_1] 
                   )
# 152 "src/Parser.fsy"
                 : 'gentype_sequenceExpr));
# 651 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ifExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "src/Parser.fsy"
                                                 _1 
                   )
# 158 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 662 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_curlyExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "src/Parser.fsy"
                                                 _1 
                   )
# 159 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 673 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "src/Parser.fsy"
                                                      mkNode(parseState, 2, Expr.Assign(_1, _3)) 
                   )
# 160 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 685 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "src/Parser.fsy"
                                                           mkNode(parseState, 1, Expr.While(_2, _4)) 
                   )
# 161 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 697 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "src/Parser.fsy"
                                                           mkNode(parseState, 1, Expr.DoWhile(_2, _4)) 
                   )
# 163 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 709 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_parenArgTypesSeq in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "src/Parser.fsy"
                                                                   mkNode(parseState, 1, Expr.Lambda(_2, _4)) 
                   )
# 164 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 721 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            let _5 = parseState.GetInput(5) :?> 'gentype_matchCases in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "src/Parser.fsy"
                                                                           mkNode(parseState, 1,
                                                                                  Expr.Match(_2, _5)) 
                   )
# 165 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 734 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_simpleExpr in
            let _6 = parseState.GetInput(6) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "src/Parser.fsy"
                                                                          mkNode(parseState, 1, Expr.If(_2, _4, _6)) 
                   )
# 170 "src/Parser.fsy"
                 : 'gentype_ifExpr));
# 747 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_orExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "src/Parser.fsy"
                                                                          _1 
                   )
# 171 "src/Parser.fsy"
                 : 'gentype_ifExpr));
# 758 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_orExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_andExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "src/Parser.fsy"
                                              mkNode(parseState, 2, Expr.Or(_1, _3)) 
                   )
# 175 "src/Parser.fsy"
                 : 'gentype_orExpr));
# 770 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_orExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_andExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "src/Parser.fsy"
                                                  // if e1 then true else e2
                          mkNode(parseState, 2, Expr.If(_1, mkBool parseState 2 true, _3)) 
                   )
# 176 "src/Parser.fsy"
                 : 'gentype_orExpr));
# 783 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_andExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "src/Parser.fsy"
                                              _1 
                   )
# 178 "src/Parser.fsy"
                 : 'gentype_orExpr));
# 794 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_andExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_relExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "src/Parser.fsy"
                                                mkNode(parseState, 2, Expr.And(_1, _3)) 
                   )
# 182 "src/Parser.fsy"
                 : 'gentype_andExpr));
# 806 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_andExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_relExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "src/Parser.fsy"
                                                    // if e1 then e2 else false
                             mkNode(parseState, 2, Expr.If(_1, _3, mkBool parseState 2 false)) 
                   )
# 183 "src/Parser.fsy"
                 : 'gentype_andExpr));
# 819 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_relExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "src/Parser.fsy"
                                                _1 
                   )
# 185 "src/Parser.fsy"
                 : 'gentype_andExpr));
# 830 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_addExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_addExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "src/Parser.fsy"
                                               mkNode(parseState, 2, Expr.Eq(_1, _3)) 
                   )
# 189 "src/Parser.fsy"
                 : 'gentype_relExpr));
# 842 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_addExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_addExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "src/Parser.fsy"
                                               mkNode(parseState, 2, Expr.Less(_1, _3)) 
                   )
# 190 "src/Parser.fsy"
                 : 'gentype_relExpr));
# 854 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_addExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "src/Parser.fsy"
                                               _1 
                   )
# 191 "src/Parser.fsy"
                 : 'gentype_relExpr));
# 865 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_addExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_multExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "src/Parser.fsy"
                                                   mkNode(parseState, 2, Expr.Add(_1, _3)) 
                   )
# 195 "src/Parser.fsy"
                 : 'gentype_addExpr));
# 877 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_multExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "src/Parser.fsy"
                                                   _1 
                   )
# 196 "src/Parser.fsy"
                 : 'gentype_addExpr));
# 888 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_multExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_unaryExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "src/Parser.fsy"
                                                     mkNode(parseState, 2, Expr.Mult(_1, _3)) 
                   )
# 200 "src/Parser.fsy"
                 : 'gentype_multExpr));
# 900 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_unaryExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "src/Parser.fsy"
                                                     _1 
                   )
# 201 "src/Parser.fsy"
                 : 'gentype_multExpr));
# 911 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_unaryExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Not(_2)) 
                   )
# 205 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 922 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.ReadInt) 
                   )
# 206 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 933 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.ReadInt) 
                   )
# 207 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 943 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.ReadFloat) 
                   )
# 208 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 954 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.ReadFloat) 
                   )
# 209 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 964 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Print(_3)) 
                   )
# 210 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 975 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.PrintLn(_3)) 
                   )
# 211 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 986 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Assertion(_3)) 
                   )
# 212 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 997 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Copy(_3)) 
                   )
# 213 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 1008 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ascriptionExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "src/Parser.fsy"
                                                         _1 
                   )
# 214 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 1019 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _2 = parseState.GetInput(2) :?> 'gentype_parenExprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "src/Parser.fsy"
                                                         mkNode(parseState, 1, Expr.Application(_1, _2))
                   )
# 215 "src/Parser.fsy"
                 : 'gentype_unaryExpr));
# 1031 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "src/Parser.fsy"
                                                  mkNode(parseState, 2, Expr.Ascription(_3, _1)) 
                   )
# 219 "src/Parser.fsy"
                 : 'gentype_ascriptionExpr));
# 1043 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "src/Parser.fsy"
                                                  _1 
                   )
# 220 "src/Parser.fsy"
                 : 'gentype_ascriptionExpr));
# 1054 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "src/Parser.fsy"
                                                                    _2 
                   )
# 224 "src/Parser.fsy"
                 : 'gentype_primary));
# 1065 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "src/Parser.fsy"
                                                                    _1 
                   )
# 225 "src/Parser.fsy"
                 : 'gentype_primary));
# 1076 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "src/Parser.fsy"
                                                                    mkNode(parseState, 1, Expr.Var(_1)) 
                   )
# 226 "src/Parser.fsy"
                 : 'gentype_primary));
# 1087 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_structFieldInitSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "src/Parser.fsy"
                                                                    mkNode(parseState, 1, Expr.StructCons(_3)) 
                   )
# 227 "src/Parser.fsy"
                 : 'gentype_primary));
# 1098 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _3 = parseState.GetInput(3) :?> 'gentype_field in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "src/Parser.fsy"
                                                                    mkNode(parseState, 2, Expr.FieldSelect(_1, _3)) 
                   )
# 228 "src/Parser.fsy"
                 : 'gentype_primary));
# 1110 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "src/Parser.fsy"
                                                                    mkNode(parseState, 1, Expr.UnionCons(_1, _3)) 
                   )
# 229 "src/Parser.fsy"
                 : 'gentype_primary));
# 1122 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "src/Parser.fsy"
                                       _1 
                   )
# 233 "src/Parser.fsy"
                 : 'gentype_variable));
# 1133 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.BoolVal(_1)) 
                   )
# 237 "src/Parser.fsy"
                 : 'gentype_value));
# 1144 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.IntVal(_1)) 
                   )
# 238 "src/Parser.fsy"
                 : 'gentype_value));
# 1155 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> single in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.FloatVal(_1)) 
                   )
# 239 "src/Parser.fsy"
                 : 'gentype_value));
# 1166 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.StringVal(_1.[1..^1])) 
                   )
# 240 "src/Parser.fsy"
                 : 'gentype_value));
# 1177 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.UnitVal) 
                   )
# 241 "src/Parser.fsy"
                 : 'gentype_value));
# 1188 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "src/Parser.fsy"
                                                                    mkPretypeNode(parseState, 1,
                                                                                  Pretype.TId(_1)) 
                   )
# 245 "src/Parser.fsy"
                 : 'gentype_pretype));
# 1200 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parenTypesSeq in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "src/Parser.fsy"
                                                                    mkPretypeNode(parseState, 1,
                                                                                  Pretype.TFun(_1, _3)) 
                   )
# 247 "src/Parser.fsy"
                 : 'gentype_pretype));
# 1213 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_structFieldTypeSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "src/Parser.fsy"
                                                                    mkPretypeNode(parseState, 1,
                                                                                  Pretype.TStruct(_3)) 
                   )
# 249 "src/Parser.fsy"
                 : 'gentype_pretype));
# 1225 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_unionLabelTypeSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "src/Parser.fsy"
                                                                    mkPretypeNode(parseState, 1,
                                                                                  Pretype.TUnion(_3)) 
                   )
# 251 "src/Parser.fsy"
                 : 'gentype_pretype));
# 1237 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "src/Parser.fsy"
                                  _1 
                   )
# 256 "src/Parser.fsy"
                 : 'gentype_ident));
# 1248 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "src/Parser.fsy"
                                                  [] 
                   )
# 261 "src/Parser.fsy"
                 : 'gentype_parenArgTypesSeq));
# 1258 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "src/Parser.fsy"
                                                  [] 
                   )
# 262 "src/Parser.fsy"
                 : 'gentype_parenArgTypesSeq));
# 1269 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_argTypesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "src/Parser.fsy"
                                                  _2 
                   )
# 263 "src/Parser.fsy"
                 : 'gentype_parenArgTypesSeq));
# 1280 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            let _5 = parseState.GetInput(5) :?> 'gentype_argTypesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "src/Parser.fsy"
                                                                     (_1, _3) :: _5 
                   )
# 267 "src/Parser.fsy"
                 : 'gentype_argTypesSeq));
# 1293 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "src/Parser.fsy"
                                                                     [(_1, _3)] 
                   )
# 268 "src/Parser.fsy"
                 : 'gentype_argTypesSeq));
# 1305 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "src/Parser.fsy"
                                               [] 
                   )
# 272 "src/Parser.fsy"
                 : 'gentype_parenTypesSeq));
# 1315 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "src/Parser.fsy"
                                               [] 
                   )
# 273 "src/Parser.fsy"
                 : 'gentype_parenTypesSeq));
# 1326 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_typesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 274 "src/Parser.fsy"
                                               _2 
                   )
# 274 "src/Parser.fsy"
                 : 'gentype_parenTypesSeq));
# 1337 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pretype in
            let _3 = parseState.GetInput(3) :?> 'gentype_typesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "src/Parser.fsy"
                                                   _1 :: _3 
                   )
# 278 "src/Parser.fsy"
                 : 'gentype_typesSeq));
# 1349 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "src/Parser.fsy"
                                                   [_1] 
                   )
# 279 "src/Parser.fsy"
                 : 'gentype_typesSeq));
# 1360 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "src/Parser.fsy"
                                                   [] 
                   )
# 283 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 1370 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "src/Parser.fsy"
                                                   [] 
                   )
# 284 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 1381 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "src/Parser.fsy"
                                                   _2 
                   )
# 285 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 1392 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_exprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "src/Parser.fsy"
                                                          _1 :: _3 
                   )
# 289 "src/Parser.fsy"
                 : 'gentype_exprCommaSeq));
# 1404 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "src/Parser.fsy"
                                                          [_1] 
                   )
# 290 "src/Parser.fsy"
                 : 'gentype_exprCommaSeq));
# 1415 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            let _5 = parseState.GetInput(5) :?> 'gentype_structFieldInitSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "src/Parser.fsy"
                                                                        (_1, _3) :: _5 
                   )
# 295 "src/Parser.fsy"
                 : 'gentype_structFieldInitSeq));
# 1428 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "src/Parser.fsy"
                                                                        [(_1, _3)] 
                   )
# 296 "src/Parser.fsy"
                 : 'gentype_structFieldInitSeq));
# 1440 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "src/Parser.fsy"
                                       _1 
                   )
# 300 "src/Parser.fsy"
                 : 'gentype_field));
# 1451 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            let _5 = parseState.GetInput(5) :?> 'gentype_structFieldTypeSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "src/Parser.fsy"
                                                                        (_1, _3) :: _5 
                   )
# 305 "src/Parser.fsy"
                 : 'gentype_structFieldTypeSeq));
# 1464 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "src/Parser.fsy"
                                                                        [(_1, _3)] 
                   )
# 306 "src/Parser.fsy"
                 : 'gentype_structFieldTypeSeq));
# 1476 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            let _5 = parseState.GetInput(5) :?> 'gentype_unionLabelTypeSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "src/Parser.fsy"
                                                                       (_1, _3) :: _5 
                   )
# 311 "src/Parser.fsy"
                 : 'gentype_unionLabelTypeSeq));
# 1489 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "src/Parser.fsy"
                                                                       [(_1, _3)] 
                   )
# 312 "src/Parser.fsy"
                 : 'gentype_unionLabelTypeSeq));
# 1501 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "src/Parser.fsy"
                                       _1 
                   )
# 316 "src/Parser.fsy"
                 : 'gentype_label));
# 1512 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_variable in
            let _6 = parseState.GetInput(6) :?> 'gentype_simpleExpr in
            let _8 = parseState.GetInput(8) :?> 'gentype_matchCases in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "src/Parser.fsy"
                                                                                           (_1, _3, _6) :: _8 
                   )
# 321 "src/Parser.fsy"
                 : 'gentype_matchCases));
# 1526 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_variable in
            let _6 = parseState.GetInput(6) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "src/Parser.fsy"
                                                                                           [(_1, _3, _6)] 
                   )
# 322 "src/Parser.fsy"
                 : 'gentype_matchCases));
|]
# 1540 "src/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let program lexer lexbuf : AST.UntypedAST =
    engine lexer lexbuf 0 :?> _
